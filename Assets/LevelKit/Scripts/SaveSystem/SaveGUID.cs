// Copyright Semaeopus Ltd. 2017
// This code was created as part of LevelKit on: 2019-11-26 - 9:25
// DO NOT EDIT THIS FILE - Code changes will NOT be picked up and may break your project
// Visit http://wiki.offgridthegame.com for help - Happy Hacking!

using UnityEngine;
using UnityEngine.SceneManagement;
#if UNITY_EDITOR
using UnityEditor;
using UnityEditor.SceneManagement;
#endif


[ExecuteInEditMode, DisallowMultipleComponent]
public class SaveGUID : MonoBehaviour
{
    public string guid;

#if UNITY_EDITOR

    [ContextMenu("Empty GUID")]
    public void EmptyGUID()
    {
        guid = string.Empty;
        EditorUtility.SetDirty(this);
    }

    [ContextMenu("Copy GUID")]
    private void CopyGUID()
    {
        EditorGUIUtility.systemCopyBuffer = guid;
    }

    [ContextMenu("Regenerate GUID")]
    public void RegenerateGUID()
    {
        guid = System.Guid.NewGuid().ToString();
        EditorUtility.SetDirty(this);
        EditorSceneManager.MarkSceneDirty(SceneManager.GetActiveScene());
    }

    public static bool IsDuplicate(SaveGUID guid, out SaveGUID dupe)
    {
        dupe = null;
        if (string.IsNullOrEmpty(guid.guid))
        {
            return false;
        }
        
        foreach (SaveGUID otherGuid in FindObjectsOfType<SaveGUID>())
        {
            if (guid.guid == otherGuid.guid &&
                otherGuid.gameObject != guid.gameObject)
            {
                dupe = otherGuid;
                return true;
            }
        }

        return false;
    }
#endif // UNITY_EDITOR

}

#if UNITY_EDITOR
[CustomEditor(typeof(SaveGUID)), CanEditMultipleObjects]
public class SaveGUIDInspector : Editor
{
    public override void OnInspectorGUI()
    {
        GUI.enabled = false;
        EditorGUILayout.Space();
        EditorGUILayout.PropertyField(serializedObject.FindProperty("guid"), new GUIContent("GUID"));
        GUI.enabled = true;
        if (targets.Length == 1)
        {
            SaveGUID targetGUID = target as SaveGUID;

            SaveGUID duplicateGuid;
            if (SaveGUID.IsDuplicate(targetGUID, out duplicateGuid))
            {
                EditorGUILayout.BeginHorizontal();
                GUI.enabled = false;
                EditorGUILayout.ObjectField("Save Guid has duplicate!", duplicateGuid, typeof(SaveGUID), true);
                GUI.enabled = true;

                if (GUILayout.Button("Regenate this guid") && targetGUID)
                {
                    targetGUID.RegenerateGUID();
                }

                EditorGUILayout.EndHorizontal();
            }

            if (string.IsNullOrEmpty(targetGUID.guid))
            {
                EditorGUILayout.LabelField("Guid is empty!");
                if (GUILayout.Button("Regenate this guid") && targetGUID)
                {
                    targetGUID.RegenerateGUID();
                }
            }

            PrefabType type = PrefabUtility.GetPrefabType(target);
            if (type == PrefabType.PrefabInstance)
            {
                SaveGUID prefabGUID = PrefabUtility.GetCorrespondingObjectFromSource(target) as SaveGUID;
                if (prefabGUID != null)
                {
                    if (!string.IsNullOrEmpty(prefabGUID.guid))
                    {
                        EditorGUILayout.ObjectField(prefabGUID, typeof(GameObject), false);
                        EditorGUILayout.HelpBox("Prefab has non empty guid value, this will cause issues!",
                            MessageType.Error);
                        if (GUILayout.Button("Fix"))
                        {
                            prefabGUID.EmptyGUID();
                            ((SaveGUID)target).RegenerateGUID();
                        }
                    }
                }
            }
        }

    }
}

#endif
