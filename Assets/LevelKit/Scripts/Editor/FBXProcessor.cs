// Copyright Semaeopus Ltd. 2017
// This code was created as part of LevelKit on: 2019-11-26 - 9:25
// DO NOT EDIT THIS FILE - Code changes will NOT be picked up and may break your project
// Visit http://wiki.offgridthegame.com for help - Happy Hacking!

using UnityEngine;
using UnityEngine.Rendering;
using UnityEditor;

public class FBXProcessor : AssetPostprocessor 
{
    private const string architecturePath = "Assets/LevelKit/Models/Architecture/";
    private const string propsPath = "Assets/LevelKit/Models/Props";
    private const float propWalkHeight = 0.1f;

    private void OnPreprocessModel () 
    {
        ModelImporter importer = (ModelImporter)assetImporter;
        importer.generateSecondaryUV = true;
    }

    private void OnPostprocessModel(GameObject model)
    {
        if (assetPath.StartsWith(architecturePath) && assetPath.EndsWith(".fbx"))
        {
            // Set shadow casting mode to twosided, so directional lights work as intended
            foreach (MeshRenderer renderer in  model.GetComponentsInChildren<MeshRenderer>())
            {
                // No shadows should be cast from glass meshes
                renderer.shadowCastingMode = (renderer.name.EndsWith("_Glass")) ? ShadowCastingMode.Off : ShadowCastingMode.TwoSided;
            }

            // Set it to the "level" layer
            model.layer = LayerMask.NameToLayer("level");

            // Set mesh to static
            model.isStatic = true;
        }
        else if (assetPath.StartsWith(propsPath) && assetPath.EndsWith(".fbx"))
        {
            Collider col = model.GetComponent<Collider>();
            if (col)
            {
                // Set props below our prop walk height to not walkable
                if (col.bounds.extents.y > propWalkHeight)
                {
                    model.isStatic = true;
                    int navArea = GameObjectUtility.GetNavMeshAreaFromName("Not Walkable");
                    GameObjectUtility.SetNavMeshArea(model, navArea);
                }
            }
        }
        
        // Check that none of the models are missing normals or UVs
        foreach (MeshFilter meshFilter in  model.GetComponentsInChildren<MeshFilter>())
        {
            if (meshFilter.sharedMesh.normals.Length == 0)
            {
                Debug.LogErrorFormat(model, "'{0}' has no normals!", assetPath);
            }
            if (meshFilter.sharedMesh.uv.Length == 0)
            {
                Debug.LogErrorFormat(model, "'{0}' has no uvs!", assetPath);
            }
            if (meshFilter.sharedMesh.uv2.Length == 0)
            {
                Debug.LogErrorFormat(model, "'{0}' has no secondary uvs!", assetPath);
            }
        }
    }
}
