// Copyright Semaeopus Ltd. 2017
// This code was created as part of LevelKit on: 2019-11-26 - 9:25
// DO NOT EDIT THIS FILE - Code changes will NOT be picked up and may break your project
// Visit http://wiki.offgridthegame.com for help - Happy Hacking!

#if LEVEL_KIT && UNITY_EDITOR
using System.IO;
using UnityEngine;
using UnityEditor;
using UnityEditor.SceneManagement;
using UnityEngine.SceneManagement;

[System.Serializable]
public class LevelKitTab_CreateMod : LevelKitTabBase
{
    public LevelKitTab_CreateMod(LevelKitTool tool) 
        : base(tool, TabAvailability.OutOfLevel)
    {
    }
    
    public override void Draw()
    {
        EditorGUILayout.LabelField("Create New Mod", EditorStyles.boldLabel);

        ModDefinition currentMod = m_Tool.currentMod;

        currentMod.type = (ModDefinition.Type)EditorGUILayout.EnumPopup("Type", currentMod.type);

        switch (currentMod.type)
        {
            case ModDefinition.Type.Mission:
                DrawMissionCreation();
                break;
            case ModDefinition.Type.App:
                DrawAppCreation();
                break;
        }
    }

    private void DrawMissionCreation()
    {
        LevelDefinition firstLevel = m_Tool.currentLevel;
        
        ModDefinition currentMod = m_Tool.currentMod;

        currentMod.modIcon = (Texture2D) EditorGUILayout.ObjectField("Mod Icon", currentMod.modIcon, typeof(Texture2D), false);
        currentMod.name = EditorGUILayout.TextField("Mod Name", currentMod.name);
        currentMod.description = EditorGUILayout.TextField("Mod Description", currentMod.description);

        ++EditorGUI.indentLevel;
        LevelKitUtils.DrawEditiableLevelDefinition(firstLevel);
        --EditorGUI.indentLevel;

        if (GUILayout.Button("Create New mod"))
        {
            if (string.IsNullOrEmpty(currentMod.name))
            {
                Debug.LogError("Name for mod must be provided");
                return;
            }
            
            if (string.IsNullOrEmpty(firstLevel.name))
            {
                Debug.LogError("Name for level must be provided");
                return;
            }
            
            // Auto fill in a few values
            firstLevel.sceneName = firstLevel.name;
            
            // Set Harbour as default district
            firstLevel.district = firstLevel.district == string.Empty
                ? "Harbour"
                : firstLevel.district;
            
            firstLevel.assetBundles = new[] {firstLevel.name.ToLower()};
            firstLevel.missionScripts = new[] {firstLevel.name + "_mission.lua"};

            string modPath = CreateNewMod(currentMod);
            if (null != modPath)
            {
                CreateNewLevel(modPath, firstLevel);
            }
        }
    }

    private void DrawAppCreation()
    {
        ModDefinition currentMod = m_Tool.currentMod;

        currentMod.modIcon = (Texture2D) EditorGUILayout.ObjectField("Mod Icon", currentMod.modIcon, typeof(Texture2D), false);
        currentMod.name = EditorGUILayout.TextField("Mod Name", currentMod.name);
        currentMod.description = EditorGUILayout.TextField("Mod Description", currentMod.description);
        
        if (GUILayout.Button("Create New App"))
        {
            if (!string.IsNullOrEmpty(currentMod.name))
            {
                string appPath = CreateNewMod(currentMod);

                if (!string.IsNullOrEmpty(appPath))
                {
                    // Replace template values in app
                    string[] luaFiles = Directory.GetFiles(appPath, "*.lua", SearchOption.AllDirectories);

                    foreach (string luaPath in luaFiles)
                    {
                        string luaContents = File.ReadAllText(luaPath);

                        // Replace contents
                        luaContents = luaContents.Replace("$APP_NAME", currentMod.name);
                        luaContents = luaContents.Replace("$APP_DESC", currentMod.description);

                        File.WriteAllText(luaPath, luaContents);
                    }
                }
                
                // Reset value 
                m_Tool.currentMod = new ModDefinition();
            }
            else
            {
                Debug.LogError("App name is not valid");
            }
        }
    }

    /// <summary>
    /// Creates a mod and returns a path to it, else null
    /// </summary>
    /// <param name="mod"></param>
    /// <param name="modName"></param>
    /// <returns></returns>
    public static string CreateNewMod(ModDefinition mod)
    {
        if (mod.type == ModDefinition.Type.Mission)
        {
            string missionModPath = string.Format("Assets/Levels/{0}", mod.name);
            if (!Directory.Exists(missionModPath))
            {
                Directory.CreateDirectory(missionModPath);

                string globalappsPath = Path.Combine(missionModPath, "GlobalApps");
                Directory.CreateDirectory(globalappsPath);

                // Write out mod.json
                File.WriteAllText(Path.Combine(missionModPath, "mod.json"), JsonUtility.ToJson(mod, true));

                AssetDatabase.Refresh();
                return missionModPath;
            }
            Debug.LogErrorFormat("Mod with name {0} already exists", mod.name);
            return null;
        }
        
        if (mod.type == ModDefinition.Type.App)
        {
            string appPath = Path.Combine("Assets/Apps", mod.name);
            if (!Directory.Exists(appPath))
            {
                if (LevelKitUtils.CopyDirectory("Assets/Apps/_template", appPath,
                    info => info.Extension != ".meta"))
                {                       
                    // Write out mod json file
                    File.WriteAllText(Path.Combine(appPath, "mod.json"), JsonUtility.ToJson(mod, true));
                    
                    LevelKitUtils.RemoveReadonly(appPath, true);
                }

                AssetDatabase.Refresh();
                return appPath;
            }
            Debug.LogErrorFormat("{0} already exists", appPath);
            return null;
        }
        

        return null;
    }

    /// <summary>
    /// Create a new level within an existing mod
    /// </summary>
    /// <param name="modPath"></param>
    /// <param name="level"></param>
    /// <param name="openSceneOnComplete"></param>
    /// <param name="openLevelFolderOnComplete"></param>
    /// <returns></returns>
    public static bool CreateNewLevel(string modPath, LevelDefinition level, bool openSceneOnComplete = true, bool openLevelFolderOnComplete = true)
    {
        // Make sure name is valid
        if (string.IsNullOrEmpty(level.name))
        {
            EditorUtility.DisplayDialog(
                "Error",
                "Please make sure you've set Level Name",
                "Ok");
            return false;
        }

        // Create Level structure
        string levelPath = Path.Combine(modPath,level.name);
      
        try
        {
            // Copy the template without the .meta files
            LevelKitUtils.CopyDirectory("Assets/Levels/_template", levelPath, info =>
            {
                bool shouldCopy = info.Extension != ".meta"
                                  && info.Name != "_template.unity";

                return shouldCopy;
            },
            info => !info.FullName.EndsWith("_template/Scene/_template"));
            LevelKitUtils.RemoveReadonly(levelPath, true);

            string leveJsonPath = Path.Combine(levelPath, "level.json");

            // Write out level.json
            File.WriteAllText(leveJsonPath, JsonUtility.ToJson(level, true));

            File.Move(Path.Combine(levelPath, "Content/MISSION_NAME_mission.lua"), Path.Combine(levelPath, "Content/" + level.name + "_mission.lua"));

        }
        catch(IOException e)
        {
            Debug.LogErrorFormat("Failed to create directory for level '{0}' at path '{1}'", level.name, levelPath);
            Debug.LogErrorFormat("{0}: {1}", e.GetType().Name, e.Message);
        }
        
        // Create scene
        string sceneDir = Path.Combine(levelPath, "Scene");
        bool wasCreated = false;

        if(Directory.Exists(sceneDir))
        {
            string scenePath = Path.Combine(sceneDir, level.name) + ".unity";
            
            // Find _template scene
            Scene templateScene = EditorSceneManager.OpenScene("Assets/Levels/_template/Scene/_template.unity", OpenSceneMode.Additive);

            if (templateScene.IsValid())
            {
                wasCreated = EditorSceneManager.SaveScene(templateScene, scenePath, true);
                EditorSceneManager.CloseScene(templateScene, true);

                if (wasCreated && openSceneOnComplete)
                {
                    EditorSceneManager.OpenScene(scenePath, OpenSceneMode.Single);
                }
            }
        }
        
        if (!wasCreated)
        {
            EditorUtility.DisplayDialog(
                "Error",
                string.Format("Couldn't create level with name {0}", level.name),
                "Ok");
            return false;
        }

        if (openLevelFolderOnComplete)
        {
            EditorUtility.OpenWithDefaultApp(levelPath);
        }

        AssetDatabase.Refresh();
        return true;
    }
}

#endif // LEVEL_KIT && UNITY_EDITOR
