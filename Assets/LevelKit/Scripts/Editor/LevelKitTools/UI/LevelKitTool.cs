// Copyright Semaeopus Ltd. 2017
// This code was created as part of LevelKit on: 2019-11-26 - 9:25
// DO NOT EDIT THIS FILE - Code changes will NOT be picked up and may break your project
// Visit http://wiki.offgridthegame.com for help - Happy Hacking!

#if LEVEL_KIT && UNITY_EDITOR
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEditor;
using System.IO;
using UnityEditor.VersionControl;

public class LevelKitTool : EditorWindow 
{
    // Constants 
    public const string kIconPath = "Assets/LevelKit/Textures/OffGridLevelKitIcon.png";
    
    /// <summary>
    /// The current scene 
    /// </summary>
    public Scene activeScene;

    /// <summary>
    /// The absolute path to the current level
    /// </summary>
    public string fullLevelPath = string.Empty;
    
    /// <summary>
    /// The absolute path to the current mod
    /// </summary>
    public string fullModPath = string.Empty;

    /// <summary>
    /// The absolute path to the current levels scene directory
    /// </summary>
    public string fullSceneDirPath = string.Empty;
    
    /// <summary>
    /// Information about the current level
    /// </summary>
    public LevelDefinition currentLevel;

    /// <summary>
    /// Information about the current mod
    /// </summary>
    public ModDefinition currentMod;

    /// <summary>
    /// Are we currently editing a LevelKit level?
    /// </summary>
    public bool isInLevelKitLevel = false;
    
    /// <summary>
    /// Type of tabs 
    /// </summary>
    public enum TabType
    {
        Create = 0,
        Build,
        Tweaks,
        Validate,
        Networking,
    }
    
    /// <summary>
    /// The current tab
    /// </summary>
    [SerializeField] 
    public TabType currentTabType = TabType.Build;

    /// <summary>
    /// List of all the tabs
    /// </summary>
    public List<LevelKitTabBase> toolTabs;

    /// <summary>
    /// Open the LevelKit tool
    /// </summary>
    [MenuItem("Off Grid/LevelKit Tool", false, 1)]
    public static void OpenLevelKitTools()
    {
        GetWindow(typeof(LevelKitTool));
    }

    /// <summary>
    /// Called when the tool is first opened, init the tool
    /// </summary>
    private void OnEnable()
    {
        if (null == toolTabs)
        {
            // Indices _must_ match TabType
            toolTabs = new List<LevelKitTabBase>
            {
                new LevelKitTab_CreateMod(this),
                new LevelKitTab_Build(this),
               // new LevelKitTab_Tweaks(this),
                new LevelKitTab_Validate(this),
                new LevelKitTab_Networking(this),
            };
        }
        
        if (null == currentLevel)
        {
            currentLevel = new LevelDefinition();
        }

        if (null == currentMod)
        {
            currentMod = new ModDefinition();
        }
        
        activeScene = SceneManager.GetActiveScene();
        
        SceneChanged();

        toolTabs[(int)currentTabType].OnFocusGain();
        
        autoRepaintOnSceneChange = true;
        
        Texture2D icon = null;
        if (File.Exists(kIconPath))
        {
            byte[] FileData = File.ReadAllBytes(kIconPath);
            icon = new Texture2D(2, 2);
            icon.LoadImage(FileData);
        }
        titleContent = new GUIContent("LevelKit Tool", icon, "This window contains all the tools you'll need to create a Level for Off Grid");
    }

    /// <summary>
    /// Update per frame
    /// </summary>
    private void Update()
    {
        // Manually paint the tool
        Repaint();
        
        // Check for scene changes
        if (activeScene != SceneManager.GetActiveScene())
        {
            activeScene = SceneManager.GetActiveScene();
            SceneChanged();
        }
        
        // Update all tabs
        foreach (LevelKitTabBase tab in toolTabs)
        {
            tab.Update();
        }
    }

    /// <summary>
    /// Draw the current tabs
    /// </summary>
    private void OnGUI()
    {
        if (!activeScene.isLoaded 
            && BuildPipeline.isBuildingPlayer)
        {
            EditorGUILayout.LabelField("Waiting...", EditorStyles.centeredGreyMiniLabel);
            return;
        }

        EditorGUI.BeginChangeCheck();
        currentTabType = (TabType)GUILayout.Toolbar ((int)currentTabType, new[] {"Create", "Build",/*"Tweaks",*/ "Validate", "Networking"});
            
        if(EditorGUI.EndChangeCheck())
        {
            toolTabs[(int)currentTabType].OnFocusGain();
        }
            
        LevelKitTabBase currentTab = toolTabs[(int) currentTabType];

        // Draw if the tab is happy with the current state
        bool shouldDraw = currentTab.Availability() == LevelKitTabBase.TabAvailability.All
            || (isInLevelKitLevel && (currentTab.Availability() & LevelKitTabBase.TabAvailability.InLevel) == LevelKitTabBase.TabAvailability.InLevel)
            || (!isInLevelKitLevel && (currentTab.Availability() & LevelKitTabBase.TabAvailability.OutOfLevel) == LevelKitTabBase.TabAvailability.OutOfLevel);

        //if (shouldDraw)
        {
            currentTab.Draw();
        }

        //else
        //{
        //    //EditorGUILayout.LabelField("Tab not available in current context", EditorStyles.centeredGreyMiniLabel);
        //}
    }

    /// <summary>
    /// Deal with scene changes
    /// </summary>
    private void SceneChanged()
    {
        isInLevelKitLevel = false;

        if (!string.IsNullOrEmpty(activeScene.path)
            && activeScene.name != "_template")
        {
            FileInfo sceneInfo = new FileInfo(activeScene.path);

            // Scene should be one directory down from the level folder and two down from the mod folder
            if (sceneInfo.Directory != null
                && sceneInfo.Directory.Parent != null
                && sceneInfo.Directory.Parent.Parent != null)
            {
                fullSceneDirPath = sceneInfo.Directory.FullName;
                fullLevelPath = sceneInfo.Directory.Parent.FullName;
                fullModPath = sceneInfo.Directory.Parent.Parent.FullName;
                
                // Unity likes all paths to be relative from the project root, so we'll do that work here
                // dataPath is Assets folder, so grab the parent
                string projectRoot = new DirectoryInfo(Application.dataPath).Parent.FullName;
                
                // Remove unity root from paths
                fullSceneDirPath = fullSceneDirPath.Substring(projectRoot.Length + 1);
                fullLevelPath = fullLevelPath.Substring(projectRoot.Length + 1);
                fullModPath = fullModPath.Substring(projectRoot.Length + 1);

                string modJsonPath = Path.Combine(fullModPath, "mod.json");
                if (File.Exists(modJsonPath))
                {
                    currentMod = JsonUtility.FromJson<ModDefinition>(File.ReadAllText(modJsonPath));

                    // Load the mods icon is it's valid
                    if (!string.IsNullOrEmpty(currentMod.iconPath))
                    {
                        currentMod.modIcon = AssetDatabase.LoadAssetAtPath<Texture2D>(currentMod.iconPath);
                    }
                }
                else
                {
                    Debug.LogErrorFormat("Expected mod.json at '{0}' please check level is formatted correctly", modJsonPath);
                    currentMod = new ModDefinition();
                }
                
                string levelJsonPath = Path.Combine(fullLevelPath, "level.json");
                if (File.Exists(levelJsonPath))
                {
                    currentLevel = JsonUtility.FromJson<LevelDefinition>(File.ReadAllText(levelJsonPath));
                }
                else
                {
                    Debug.LogErrorFormat("Expected level.json at '{0}' please check level is formatted correctly", levelJsonPath);
                    currentLevel = new LevelDefinition();
                }
                
                isInLevelKitLevel = true;
            }
            else
            {
                Debug.LogErrorFormat("Scene {0} isn't in correct directory structure", activeScene.name);
            }
        }
        else
        {
            currentMod = new ModDefinition();
            currentLevel = new LevelDefinition();
            fullSceneDirPath = string.Empty;
            fullLevelPath = string.Empty;
            fullModPath = string.Empty;
        }

        // If we're in a level and the current type is create, it means we've jumped to a level
        // So we'll select the build tab
        if (isInLevelKitLevel && currentTabType == TabType.Create)
        {
            currentTabType = TabType.Build;
        }

        // Let all the tabs know the scene has changed
        foreach (LevelKitTabBase tab in toolTabs)
        {
            tab.OnSceneChange();
        }
    }

    // Utilities
    public void SaveLevelJsonChanges()
    {
        string levelJsonPath = Path.Combine(fullLevelPath, "level.json");
        if(currentLevel != null && LevelKitUtils.VCSCheckoutPath(levelJsonPath))
        {
            File.WriteAllText(levelJsonPath,
                JsonUtility.ToJson(currentLevel, true));
        }
        else
        {
            Debug.LogError("Failed to save LevelDefinition");
        }
    }
    
    public void SaveModJsonChanges()
    {
        string modJsonPath = Path.Combine(fullModPath, "mod.json");
        if(currentMod != null && LevelKitUtils.VCSCheckoutPath(modJsonPath))
        {
            File.WriteAllText(modJsonPath,
                JsonUtility.ToJson(currentMod, true));
        }
        else
        {
            Debug.LogError("Failed to save ModDefinition");
        }
    }

    public void DisplayNotification(string text)
    {
        ShowNotification(new GUIContent { text = text});
    }
}


#endif // LEVEL_KIT && UNITY_EDITOR
