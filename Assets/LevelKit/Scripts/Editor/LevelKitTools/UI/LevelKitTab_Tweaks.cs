// Copyright Semaeopus Ltd. 2017
// This code was created as part of LevelKit on: 2019-11-26 - 9:25
// DO NOT EDIT THIS FILE - Code changes will NOT be picked up and may break your project
// Visit http://wiki.offgridthegame.com for help - Happy Hacking!

#if LEVEL_KIT && UNITY_EDITOR
using System;
using UnityEngine;
using UnityEditor;
using UnityEditor.SceneManagement;
using Object = UnityEngine.Object;

[Serializable]
public class LevelKitTab_Tweaks : LevelKitTabBase
{
    [SerializeField]
    private Color vertexColour = Color.red;
    
    [SerializeField]
    private int decimalPlaces = 1;
    
    [SerializeField]
    private MidpointRounding roundType = MidpointRounding.ToEven;

    /// <summary>
    /// 0 = Name of mesh
    /// 1 = Instance ID
    /// </summary>
    private const string meshNameFormat = "{0}_VCols_{1}";

    public LevelKitTab_Tweaks(LevelKitTool tool) 
        : base(tool, TabAvailability.All)
    {
    }
    
    public override void Draw()
    {
        // Fix up architecture
        {
            EditorGUILayout.LabelField("Fix Up Architecture", EditorStyles.boldLabel);
            decimalPlaces = EditorGUILayout.IntSlider("Num Decimal Places", decimalPlaces, 1, 5);
            roundType = (MidpointRounding)EditorGUILayout.EnumPopup("Type of round", roundType);

            GUILayout.BeginHorizontal();

            if (GUILayout.Button("Pos"))
            {
                FixUpArchitecture.FixUpHierarchy(FixUpArchitecture.FixUpType.Position, decimalPlaces, roundType);
            }
            if (GUILayout.Button("Scale"))
            {
                FixUpArchitecture.FixUpHierarchy(FixUpArchitecture.FixUpType.Scale, decimalPlaces, roundType);
            }
            if (GUILayout.Button("Rotation"))
            {
                FixUpArchitecture.FixUpHierarchy(FixUpArchitecture.FixUpType.Rotation, decimalPlaces, roundType);
            }

            GUILayout.EndHorizontal();
        }

        EditorGUILayout.Space();

        // Vertex Colours
        {
            EditorGUILayout.LabelField("Fill Vertex Colours", EditorStyles.boldLabel);
            GUILayout.BeginHorizontal();

            if (GUILayout.Button("Apply"))
            {
                if (Selection.gameObjects.Length > 0)
                {
                    foreach (GameObject obj in Selection.gameObjects)
                    {
                        MeshFilter  filter  = obj.GetComponent<MeshFilter>();

                        if (filter && filter.sharedMesh)
                        {
                            Mesh mesh = null;

                            string meshName = string.Format(meshNameFormat, obj.name, obj.GetInstanceID());
                            // If the path is valid it's a project asset and we need to make a copy before applying our changes
                            if (filter.sharedMesh.name != meshName)
                            {
                                mesh = Object.Instantiate(filter.sharedMesh);
                                mesh.name = meshName;
                            }
                            else
                            {
                                mesh = filter.sharedMesh;
                            }

                            Color[] cols = new Color[mesh.vertexCount];

                            for (int i = 0; i < mesh.colors.Length; ++i)
                            {
                                cols[i] = vertexColour;
                            }

                            mesh.colors = cols;
                            filter.mesh = mesh;
                        }
                    }
                }
                EditorSceneManager.MarkAllScenesDirty();
            }
            vertexColour = EditorGUILayout.ColorField(vertexColour);

            GUILayout.EndHorizontal();
        }
    }
}

#endif // LEVEL_KIT && UNITY_EDITOR
