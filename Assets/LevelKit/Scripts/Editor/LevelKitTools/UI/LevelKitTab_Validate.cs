// Copyright Semaeopus Ltd. 2017
// This code was created as part of LevelKit on: 2019-11-26 - 9:25
// DO NOT EDIT THIS FILE - Code changes will NOT be picked up and may break your project
// Visit http://wiki.offgridthegame.com for help - Happy Hacking!

#if LEVEL_KIT && UNITY_EDITOR
using System.Linq;
using UnityEngine;
using UnityEditor;
using UnityEngine.EventSystems;

/// <summary>
/// Handles displaying issues found in the users LevelKit level
/// </summary>
[System.Serializable]
public class LevelKitTab_Validate : LevelKitTabBase
{
    
    [SerializeField]
    private static Vector2 validateScroller;

    private static float buttonsSize = 400f;

    public LevelKitTab_Validate(LevelKitTool tool) 
        : base(tool, TabAvailability.InLevel)
    {
    }
    
    /// <summary>
    /// Display any issues found
    /// </summary>
    public override void Draw()
    {
        bool objectsOk = true;

        // Allow the user to scroll 
        validateScroller = EditorGUILayout.BeginScrollView(validateScroller);

        EditorGUILayout.LabelField("Mission Issues", EditorStyles.boldLabel);
        {
            if (ValidateMission(true))
            {
                EditorGUILayout.HelpBox("No Mission issues detected", MessageType.None);
            }
        }

        EditorGUILayout.LabelField("MissionObject issues", EditorStyles.boldLabel);
        {
            foreach (MissionObject missionObject in Object.FindObjectsOfType<MissionObject>())
            {
                if (!MissionObjectInspector.ValidateObject(missionObject, false))
                {
                    EditorGUI.BeginDisabledGroup(true);
                    EditorGUILayout.ObjectField(missionObject.gameObject, typeof(GameObject), true);
                    EditorGUI.EndDisabledGroup();
                    objectsOk &= MissionObjectInspector.ValidateObject(missionObject, true);
                }
            }

            if (objectsOk)
            {
                EditorGUILayout.HelpBox("No MissionObject issues detected", MessageType.None);
            }
        }

        EditorGUILayout.LabelField("Mission warnings", EditorStyles.boldLabel);
        {
            /** Check for exist any interest points in the scene  **/
            InterestPoint[] interestPointsFound;
            if (!FindComponents<InterestPoint>(out interestPointsFound))
            {
                EditorGUILayout.BeginHorizontal();
                {
                    EditorGUILayout.SelectableLabel("No interest points were found\nInterest points are needed to maintain guard motivation", GUILayout.MinWidth(140.0f));
                }

                EditorGUILayout.EndHorizontal();
            }

            else
            {
                EditorGUILayout.HelpBox("No warnings detected", MessageType.None);
            }
        }

            EditorGUILayout.EndScrollView();
    }

    public static bool Validate()
    {
        // Only thing for the moment
        return ValidateMissionObjects() && ValidateMission(false);
    }

    public static bool ValidateMissionObjects()
    {
        bool allOk = true;

        foreach (MissionObject missionObject in Object.FindObjectsOfType<MissionObject>())
        {
            if (!MissionObjectInspector.ValidateObject(missionObject, false))
            {
                allOk = false;
                break;
            }
        }

        return allOk;
    }

    public static bool ValidateMission(bool drawGUI)
    {
        bool allOK = true;

        MissionObject[] missionObjects = Object.FindObjectsOfType<MissionObject>();
        MissionObject[] spawns = missionObjects.Where(o => o.IsSpawn()).ToArray();
        
        // Check mission setup component
        MissionSetup setup = Object.FindObjectOfType<MissionSetup>();
        if (null == setup)
        {
            allOK = false;
            if (drawGUI)
            {
                EditorGUILayout.BeginHorizontal();
                {
                    EditorGUILayout.SelectableLabel("No MissionSetup object found", GUILayout.MinWidth(140.0f));
                    if (GUILayout.Button("Fix", GUILayout.Width(buttonsSize)))
                    {
                        GameObject setupObj = new GameObject("MissionSetup");
                        Undo.RegisterCreatedObjectUndo(setupObj, "Create MissionSetup Object");
                        setup = Undo.AddComponent<MissionSetup>(setupObj);
                    }
                }
                EditorGUILayout.EndHorizontal();
            }
        }

        // Check there's no active cameras in the scene 
        bool camsActive = false;
        Camera[] cameras = Object.FindObjectsOfType<Camera>();
        foreach (Camera cam in cameras)
        {
            if (cam.enabled)
            {
                allOK = false;
                camsActive = true;
                break;
            }
        }

        if (camsActive && drawGUI)
        {
            EditorGUILayout.BeginHorizontal();
            {
                EditorGUILayout.SelectableLabel("Camera(s) active in scene", GUILayout.MinWidth(140.0f));
                if (GUILayout.Button("Fix", GUILayout.Width(buttonsSize)))
                {
                    foreach (Camera cam in cameras)
                    {
                        cam.gameObject.SetActive(false);
                    }
                }
            }
            EditorGUILayout.EndHorizontal();
        }

        // Check there's at least one spawn object
        bool spawnsFound = spawns.Length > 0;

        if (!spawnsFound)
        {
            allOK = false;
            if (drawGUI)
            {
                EditorGUILayout.BeginHorizontal();
                {
                    EditorGUILayout.SelectableLabel("No spawn found, try adding a player spawn", GUILayout.MinWidth(140.0f));
                    if (GUILayout.Button("Fix", GUILayout.Width(buttonsSize)))
                    {
                        GameObject spawnObj         = new GameObject("PlayerSpawn", typeof(MissionObject));
                        MissionObject missionObj    = spawnObj.GetComponent<MissionObject>();
                        missionObj.SetType(MissionObject.MissionObjectTypeMask.Spawn);
                        Undo.RegisterCreatedObjectUndo(spawnObj, "Create default player spawn");

                    }
                }
                EditorGUILayout.EndHorizontal();
            }
        }

        if (spawns.Length > 1)
        {
            // Check there's at least one rest object
            bool restPointFound = false;
            foreach (InterestPoint interestPoint in Object.FindObjectsOfType<InterestPoint>())
            {
				if (interestPoint.interestType == "Rest")
                {
                    restPointFound = true;
                }
            }

            if (!restPointFound)
            {
                //allOK = false;
                if (drawGUI)
                {
                    EditorGUILayout.BeginHorizontal();
                    {
                        EditorGUILayout.SelectableLabel("No rest point found", GUILayout.MinWidth(140.0f));
                        if (GUILayout.Button("Fix", GUILayout.Width(buttonsSize)))
                        {
                            Debug.LogError("Not yet implemented, should create coffee machine from prefab?");
                        }
                    }
                    EditorGUILayout.EndHorizontal();
                }
            }
        }

        /** Check for exist any event system in the scene  **/
        EventSystem[] eventSystemsFound;
        if (FindComponents<EventSystem>(out eventSystemsFound)) 
        {
            allOK = false;
            if (drawGUI)
            {
                EditorGUILayout.BeginHorizontal();
                {
                    EditorGUILayout.SelectableLabel("Event System was found\nCan cause some UI and controls issues", GUILayout.MinWidth(140.0f));
                    
                    if (GUILayout.Button("Remove found Event System", GUILayout.Width(buttonsSize)))
                    {
                        for(int i = 0; i < eventSystemsFound.Length; i++)
                        {
                            Undo.DestroyObjectImmediate(eventSystemsFound[i].gameObject); // Destroy the object and records an undo operation //
                        }
                    }   
                }
                EditorGUILayout.EndHorizontal();
            }
        }

        return allOK;
    }


    public static bool FindComponents<T>(out T[] componentsFound) where T : Component
    {
        componentsFound = Object.FindObjectsOfType<T>();
        if (componentsFound == null || componentsFound.Length <= 0)
        {
            return false;
        }

        return true;
    }
}

#endif // LEVEL_KIT && UNITY_EDITOR
