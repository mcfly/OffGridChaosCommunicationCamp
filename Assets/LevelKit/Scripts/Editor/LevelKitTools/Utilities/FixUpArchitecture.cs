// Copyright Semaeopus Ltd. 2017
// This code was created as part of LevelKit on: 2019-11-26 - 9:25
// DO NOT EDIT THIS FILE - Code changes will NOT be picked up and may break your project
// Visit http://wiki.offgridthegame.com for help - Happy Hacking!

using System;
using UnityEngine;
using UnityEditor;
using UnityEngine.SceneManagement;

public static class FixUpArchitecture
{
    private const string architecturePath = "Assets/LevelKit/Models/Architecture/";

    public enum FixUpType
    {
        Position,
        Scale,
        Rotation,
    };

    public static void FixUpHierarchy(FixUpType type, int decimalPlaces, MidpointRounding roundType)
    {
        Undo.IncrementCurrentGroup();
        Undo.SetCurrentGroupName("Fix Up " + type);
        foreach (GameObject rootGameObject in SceneManager.GetActiveScene().GetRootGameObjects())
        {
            FixUpTransform(rootGameObject.transform, type, decimalPlaces, roundType);
        }
    }

    public static void FixUpTransform(Transform transform, FixUpType type, int decimalPlaces,
        MidpointRounding roundType)
    {
        MeshFilter meshFilter = transform.GetComponent<MeshFilter>();
        if (meshFilter && AssetDatabase.GetAssetPath(meshFilter.sharedMesh).StartsWith(architecturePath))
        {
            switch (type)
            {
                case FixUpType.Position:
                    RoundPosition(transform, decimalPlaces, roundType);
                    break;
                case FixUpType.Rotation:
                    RoundRotation(transform, decimalPlaces, roundType);
                    break;
                case FixUpType.Scale:
                    RoundScale(transform, decimalPlaces, roundType);
                    break;
            }
        }
        
        foreach (Transform child in transform)
        {
            FixUpTransform(child, type, decimalPlaces, roundType);
        }

    }

    private static void RoundPosition(Transform obj, int decimalPlaces, MidpointRounding roundType)
    {
        Undo.RecordObject(obj, "Round Position");

        float x = (float)Math.Round((decimal)obj.localPosition.x, decimalPlaces, roundType);
        float y = (float)Math.Round((decimal)obj.localPosition.y, decimalPlaces, roundType);
        float z = (float)Math.Round((decimal)obj.localPosition.z, decimalPlaces, roundType);

        obj.localPosition = new Vector3(x, y, z);

        EditorUtility.SetDirty(obj);
    }

    private static void RoundRotation(Transform obj, int decimalPlaces, MidpointRounding roundType)
    {
        Undo.RecordObject(obj, "Round Scale");

        Vector3 eularRot = obj.localEulerAngles;

        eularRot.x = (float)Math.Round((decimal)eularRot.x, decimalPlaces, roundType);
        eularRot.y = (float)Math.Round((decimal)eularRot.y, decimalPlaces, roundType);
        eularRot.z = (float)Math.Round((decimal)eularRot.z, decimalPlaces, roundType);

        obj.localEulerAngles = eularRot;

        EditorUtility.SetDirty(obj);
    }

    private static void RoundScale(Transform obj, int decimalPlaces, MidpointRounding roundType)
    {
        Undo.RecordObject(obj, "Round Scale");

        Vector3 scale = obj.localScale;

        scale.x = (float)Math.Round((decimal)scale.x, decimalPlaces, roundType);
        scale.y = (float)Math.Round((decimal)scale.y, decimalPlaces, roundType);
        scale.z = (float)Math.Round((decimal)scale.z, decimalPlaces, roundType);

        obj.transform.localScale = scale;

        EditorUtility.SetDirty(obj);
    }
}
