// Copyright Semaeopus Ltd. 2017
// This code was created as part of LevelKit on: 2019-11-26 - 9:25
// DO NOT EDIT THIS FILE - Code changes will NOT be picked up and may break your project
// Visit http://wiki.offgridthegame.com for help - Happy Hacking!

using UnityEngine;
using UnityEngine.UI;
using System.Collections;

[AddComponentMenu("Devices/Smart Thermostat")]
public class SmartThermostat : Hackable 
{

	public Text temperature;
	public Image background;

	public float currentTemp;
	public Gradient colorGradient;
	public float minTemp;
	public float maxTemp;

#if GAME_CORE
	
	#region PRIVATE VARIABLES
	private float startTemp;
	private float tempRange;
	private bool increasingTemp;
	private bool decreasingTemp;

	private bool alert = false;
	private float alertLimit = 40f;
	#endregion

	// Use this for initialization
	protected override void Start () {
        base.Start();
		startTemp = currentTemp;
		tempRange = maxTemp - minTemp;
		alertLimit = startTemp + (0.75f * tempRange);
		UpdateDisplay();
	}
    
	public override void OnPowerChange(bool power) {
		if (power) {
		}
		else {
			temperature.text = string.Empty;
			background.color = Color.black;
		}

	}

	// Active means the device is doing what ever it's default "job" would be. Security camera actually monitoring things, printer spitting oput paper etc.
	public override void OnActiveChange(bool active) {
		if (active) {
			increasingTemp = true;
			StartCoroutine("IncreaseTemp");
		}
		else {
			increasingTemp = false;
			StartCoroutine("DecreaseTemp");
		}
	}

	// Single-shot version of SetActive. For example printer printing single sheet, or vending machine spitting out single can of soda.
	// If single-shot action doesn't fit with the device, make it a short-timed one instead (single sweep of security camera, or open lock for 10 seconds etc)
	public override void OnRunOnce()
    {
		currentTemp++;
		UpdateDisplay();
	}
    
	public override void SetValue(string newState) {
        base.SetValue(newState);
		float newTemp = 0.0f;
		if (float.TryParse(newState, out newTemp)) {
			currentTemp = Mathf.Clamp(newTemp, minTemp, maxTemp);
			UpdateDisplay();
		}
	}

	public override string GetValue() {
		return currentTemp.ToString();
	}

	#region PRIVATE METHODS

	private IEnumerator IncreaseTemp() {
		decreasingTemp = false;
		while (increasingTemp) {
			currentTemp++;
			UpdateDisplay();
			yield return new WaitForSeconds(1f);
		}
	}

	private IEnumerator DecreaseTemp() {
		increasingTemp = false;
		while (decreasingTemp && currentTemp > startTemp) {
			currentTemp--;
			UpdateDisplay();
			yield return new WaitForSeconds(1f);
		}
	}

	private void UpdateDisplay() {
		temperature.text = currentTemp.ToString();
		background.color = GetTempColor(currentTemp);
		if (!alert && currentTemp >= alertLimit) {
			AkSoundEngine.PostEvent("Play_Thermostat_Hacked_Loop", this.gameObject);
			alert = true;
		}
		else if (alert && currentTemp < alertLimit) {
			AkSoundEngine.PostEvent("Stop_Thermostat_Hacked_Loop", this.gameObject);
			alert = false;
		}
		if (alert) {
			float delta = currentTemp / tempRange;
			float scaledTemp = delta * 70f;
			AkSoundEngine.SetRTPCValue("RTPC_Vent_Thermostat_Tempature", scaledTemp);
		}
	}

	private Color GetTempColor(float temp) {
		Color tempColor = Color.black;
		float delta = (currentTemp - minTemp) / tempRange;
		tempColor = colorGradient.Evaluate(delta);
		return tempColor;
	}
    #endregion
#endif // GAME_CORE
}
