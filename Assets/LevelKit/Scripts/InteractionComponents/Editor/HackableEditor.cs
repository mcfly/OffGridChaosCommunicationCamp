// Copyright Semaeopus Ltd. 2017
// This code was created as part of LevelKit on: 2019-11-26 - 9:25
// DO NOT EDIT THIS FILE - Code changes will NOT be picked up and may break your project
// Visit http://wiki.offgridthegame.com for help - Happy Hacking!

using System;
using UnityEngine;
using UnityEditor;

[CustomEditor(typeof(Hackable), true)]
[CanEditMultipleObjects]
public class HackableEditor : Editor
{
    SerializedProperty powered;
    SerializedProperty preserve;
    SerializedProperty preserved;

    // So! This is the custom editor for all Hackable types including derived classes. However, we need
    // a method of displaying derived properties without writing custom inspectors for all child classes.
    // This is that method. This is a list of all properties we don't want to display (because we've already
    // displayed them in *this* custom inspector. Anything new added to Hackable, please add to this list.
    string[] hackableProperties = new string[]
    {
        "m_Script",
        "powered",
        "active",
        "amok",
        "value",
        "preserveActive",
        "preservedActive",
        "PowerOnEvent",
        "PowerOffEvent",
        "ActiveOnEvent",
        "ActiveOffEvent",
        "AmokOnEvent",
        "AmokOffEvent",
        "RunOnceEvent",
        "SetValueEvent",
    };

    public void OnEnable()
    {
        powered = serializedObject.FindProperty("powered");
        preserve = serializedObject.FindProperty("preserveActive");
        preserved = serializedObject.FindProperty("preservedActive");
    }

    public override void OnInspectorGUI()
    {
        serializedObject.Update();

        Hackable h = target as Hackable;

        EditorGUILayout.PropertyField(powered, new GUIContent("Powered"));
        EditorGUILayout.PropertyField(serializedObject.FindProperty("active"), new GUIContent("Active"));
        EditorGUILayout.PropertyField(serializedObject.FindProperty("amok"), new GUIContent("Amok"));
        EditorGUILayout.PropertyField(serializedObject.FindProperty("value"), new GUIContent("Value"));
        EditorGUILayout.Space();
        EditorGUILayout.PropertyField(preserve, new GUIContent("Preserve Active"));
        if (preserve.boolValue && !powered.boolValue) // this bool is only relevant if we want to preserve it and initially have no power
        {
            EditorGUILayout.PropertyField(preserved, new GUIContent("Preserved Active"));
        }
        EditorGUILayout.Space();
        EditorGUILayout.PropertyField(serializedObject.FindProperty("PowerOnEvent"), new GUIContent("Power On"));
        EditorGUILayout.PropertyField(serializedObject.FindProperty("PowerOffEvent"), new GUIContent("Power Off"));
        EditorGUILayout.PropertyField(serializedObject.FindProperty("ActiveOnEvent"), new GUIContent("Active On"));
        EditorGUILayout.PropertyField(serializedObject.FindProperty("ActiveOffEvent"), new GUIContent("Active Off"));
        EditorGUILayout.PropertyField(serializedObject.FindProperty("AmokOnEvent"), new GUIContent("Amok On"));
        EditorGUILayout.PropertyField(serializedObject.FindProperty("AmokOffEvent"), new GUIContent("Amok Off"));
        EditorGUILayout.PropertyField(serializedObject.FindProperty("RunOnceEvent"), new GUIContent("Run Once"));
        EditorGUILayout.PropertyField(serializedObject.FindProperty("SetValueEvent"), new GUIContent("Set Value"));

        DrawPropertiesExcluding(serializedObject, hackableProperties);

        serializedObject.ApplyModifiedProperties();
    }
}
