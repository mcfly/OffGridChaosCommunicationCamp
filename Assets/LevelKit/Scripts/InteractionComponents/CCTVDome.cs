// Copyright Semaeopus Ltd. 2017
// This code was created as part of LevelKit on: 2019-11-26 - 9:25
// DO NOT EDIT THIS FILE - Code changes will NOT be picked up and may break your project
// Visit http://wiki.offgridthegame.com for help - Happy Hacking!

using UnityEngine;
using System.Collections;

[AddComponentMenu("Devices/CCTVDome")]
public class CCTVDome : Hackable 
{

	#region PUBLIC VARIABLES
	public Renderer viewConeRenderer;
	public Projector viewconeProjector;
	public Color defaultColor;
	public Color alarmColor;
	public bool rotate = true;
	public float alarmNoiseVolume = 10f;
	#endregion

#if GAME_CORE
	#region PRIVATE VARIABLES
    
	private GameObject player;
	private bool alarm = false;

	private ViewCone view;
	private Material projectorMaterial;
	private NoiseSource noiseSource;

	private Animator animator;

	private bool dataViewEnabled = false;

 	
	#endregion

	#region UNITY & INIT

	private void OnEnable()	{
		animator = GetComponent<Animator>();
		MissionRunnerBase.OnMissionStarted += OnMissionStarted;
		projectorMaterial = new Material(viewconeProjector.material);
		viewconeProjector.material = projectorMaterial;
		ARViewController.OnARViewEnabled += OnARViewEnabled;
		ARViewController.OnARViewDisabled += OnARViewDisabled;
	}

	private void OnDisable()	{
		MissionRunnerBase.OnMissionStarted -= OnMissionStarted;
		ARViewController.OnARViewEnabled -= OnARViewEnabled;
		ARViewController.OnARViewDisabled -= OnARViewDisabled;
	}

	private void OnARViewEnabled() {
		dataViewEnabled = true;
	}

	private void OnARViewDisabled() {
		dataViewEnabled = false;
	}

	private void OnMissionStarted() {
		view = gameObject.GetComponentInChildren<ViewCone> ();
		noiseSource = gameObject.GetComponentInChildren<NoiseSource> ();      
		player = GameObject.FindGameObjectWithTag ("Player");
		SetActive(true);
		OffGridSound.SoundEvent("Play_Reception_L1_SecurityCamera", gameObject);
	}


	// Use this for initialization
	protected override void Start ()
    {
        base.Start();
		viewConeRenderer.material.SetColor("_DataColor", defaultColor);
		projectorMaterial.SetColor("_Color", defaultColor);
		viewconeProjector.enabled = false;
	}
	
	// Update is called once per frame
	private void Update () {
		viewconeProjector.enabled =  dataViewEnabled && GetActive() ? true : false;
		if (GetActive())
        {
			if (view.CanSeeObject(player) && !alarm)
            {
				Alert();
			}
		}
	}

    private void OnDestroy()
    {
        // just in case
        OffGridSound.SoundEvent("Stop_Sec_Cam_Spot_AlarmLoop", this.gameObject);
    }

    #endregion
    
	public override void OnActiveChange (bool active)
    {
		animator.SetBool("monitoring", active);
		viewConeRenderer.enabled = active;
	}
    
	public override void OnRunOnce() {
		StartCoroutine("SingleSweep");
	}

	#region PRIVATE METHODS

	private void Alert() {
		Debug.Log ("player spotted by camera!");
		CancelInvoke ("CancelAlert");
		alarm = true;
		noiseSource.EmitNoise(alarmNoiseVolume, 0.8f, 5f, false);
        OffGridSound.SoundEvent("Play_Sec_Cam_Spot_Player", gameObject);
        OffGridSound.SoundEvent("Play_Sec_Cam_Spot_AlarmLoop", gameObject);
        viewConeRenderer.material.SetColor ("_DataColor", alarmColor);
		projectorMaterial.SetColor("_Color", alarmColor);
		Invoke ("CancelAlert", 5f);
	}

	private void CancelAlert() {
		alarm = false;
        OffGridSound.SoundEvent("Stop_Sec_Cam_Spot_AlarmLoop", this.gameObject);
        viewConeRenderer.material.SetColor ("_DataColor", defaultColor);
		projectorMaterial.SetColor("_Color", defaultColor);
	}

	private IEnumerator SingleSweep() {
		SetActive(true);
		yield return new WaitForSeconds(20f);
		SetActive(false);
	}

    #endregion
#endif // GAME_CORE
}
