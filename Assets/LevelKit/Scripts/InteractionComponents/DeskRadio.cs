// Copyright Semaeopus Ltd. 2017
// This code was created as part of LevelKit on: 2019-11-26 - 9:25
// DO NOT EDIT THIS FILE - Code changes will NOT be picked up and may break your project
// Visit http://wiki.offgridthegame.com for help - Happy Hacking!

using UnityEngine;

[AddComponentMenu("Devices/Desk Radio")]
public class DeskRadio : Hackable 
{
	
	#region PUBLIC VARIABLES
	[Header("Power LED")]
	public MeshRenderer powerLed;
	[ColorUsageAttribute(false, true)]
	public Color powerOffColor;
	[ColorUsageAttribute(false, true)]
	public Color powerOnColor;
	[ColorUsageAttribute(false, true)]
	public Color powerActiveColor;

	[Header("Display")]
	public MeshRenderer display;
	[ColorUsageAttribute(false, true)]
	public Color displayOffColor;
	[ColorUsageAttribute(false, true)]
	public Color displayOnColor;
	#endregion
	
#if LEVEL_KIT
	/// <summary>
	/// Stub for Unity Events
	/// </summary>
	public void Toggle() {
	}
#endif // LEVEL_KIT
	
#if GAME_CORE

	#region PRIVATE VARIABLES

	private NoiseSource noiseSource;
	private Noise noise;
	private float defaultVolume;

	private MaterialPropertyBlock ledMaterialBlock;
	private MaterialPropertyBlock displayMaterialBlock;

	#endregion

	#region UNITY & INIT

	protected override void Start()
    {
        base.Start();
		ledMaterialBlock = new MaterialPropertyBlock();
		displayMaterialBlock = new MaterialPropertyBlock();
		
		noiseSource = GetComponentInChildren<NoiseSource>();
		if (noiseSource) {
			noise = gameObject.GetComponentInChildren<NoiseSource>().noise;
			defaultVolume = noise.volume;
			if (!GetActive()) {
				noise.volume = 0f;
			}
		}
		else {
			noise = null;
		}

		SetPower(true);
		SetActive(false);
	}

	#endregion
    
	public override void OnPowerChange(bool power)
	{
		SetLedColor(power ? powerOnColor : powerOffColor);
	}
    
	// Active means the device is doing what ever it's default "job" would be. Security camera actually monitoring things, printer spitting oput paper etc.
	public override void OnActiveChange(bool active)
    {
		if (active)
        {
			SetDisplayColor(displayOnColor);
			SetLedColor(powerActiveColor);
            if (noise != null)
            {
                noise.volume = defaultVolume;
				AkSoundEngine.PostEvent("Play_Radio_On", gameObject);
			}
		}
		else
        {
			SetDisplayColor(displayOffColor);
			SetLedColor(powerOnColor);
            if (noise != null)
            {
                noise.volume = 0f;
            }
			AkSoundEngine.PostEvent("Play_Radio_Off", gameObject);
		}
	}
    
	public void Toggle()
    {
		SetActive(!GetActive());
	}
    
	#region PRIVATE METHODS

	private void SetLedColor(Color newColour) {
		powerLed.GetPropertyBlock(ledMaterialBlock);
		ledMaterialBlock.SetColor("_Emission", newColour);
		powerLed.SetPropertyBlock(ledMaterialBlock);
	}

	private void SetDisplayColor(Color newColour) {
		display.GetPropertyBlock(displayMaterialBlock);
		displayMaterialBlock.SetColor("_Emission", newColour);
		display.SetPropertyBlock(displayMaterialBlock);
	}
	#endregion
#endif // GAME_CORE
}
