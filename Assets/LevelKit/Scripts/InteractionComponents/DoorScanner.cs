// Copyright Semaeopus Ltd. 2017
// This code was created as part of LevelKit on: 2019-11-26 - 9:25
// DO NOT EDIT THIS FILE - Code changes will NOT be picked up and may break your project
// Visit http://wiki.offgridthegame.com for help - Happy Hacking!

using System;
using UnityEngine;
using System.Collections.Generic;

[DisallowMultipleComponent]
public class DoorScanner : MonoBehaviour
{
    [Tooltip("Only used for swinging doors")]
    public bool isFront;

    public DoorScanner otherSideScanner;
	[ColorUsageAttribute(false, true)]
	public Color defaultColor;
	[ColorUsageAttribute(false, true)]
	public Color accessColor;
	[ColorUsageAttribute(false, true)]
	public Color denyColor;

    private bool lockTheDoorOnReset = true;

#if GAME_CORE

	private Door                    door;
    private CardScannerNetDevice    scannerDevice;
    private MissionObject           missionObject;
    private Renderer                lightRenderer;
    private MaterialPropertyBlock   materialBlock;

    private void Awake()
	{
        door            = GetComponentInParent<Door>();
        scannerDevice   = gameObject.AddComponent<CardScannerNetDevice>();
        missionObject   = GetComponent<MissionObject>();

	    foreach (Renderer childRenderer in GetComponentsInChildren<Renderer>())
	    {
	        if (childRenderer.material != null &&
	            childRenderer.material.name.StartsWith("ScriptControlledLamp"))
	        {
	            lightRenderer = childRenderer;
	            break;
	        }
	    }

	    Logger.Assert(lightRenderer != null, "No light found with ScriptControlledLamp material as child of DoorScanner");

	    materialBlock   = new MaterialPropertyBlock();

	    SetColour(defaultColor);

        missionObject.OnInteractionStart.AddListener(scannerDevice.OnStartInteracting);
	}

	public void GrantAccess() 
    {
		OffGridSound.SoundEvent("Play_AccessGrantedSound", this.gameObject);
		UnlockDoor();
        if (otherSideScanner)
        {
            otherSideScanner.UnlockDoor();
        }
    }

	public void DenyAccess() 
    {
		SetColour(denyColor);
		OffGridSound.SoundEvent("Play_AccessDeniedSound", this.gameObject);
        Invoke("ResetLock", 15f);
    }

	public void UnlockDoor() 
    {
        if (false == door.isOpen)
        {
            
            if (!door.isLocked) { lockTheDoorOnReset = false; }
            else { lockTheDoorOnReset = true; }

            door.isLocked = false;
            door.Toggle(true, isFront);
        }
        SetColour(accessColor);
		Invoke("ResetLock", 15f);

        //// If the door is sliding we'll open it automatically
        //if (door.type == Door.DoorType.Sliding && !door.isOpen)
        //{
        //    door.Toggle(true, true);
        //}
    }

	public CardScannerNetDevice GetScannerNetDevice() {
		return scannerDevice;
	}

	private void ResetLock()
    {
        // If the door is sliding we'll shut it automatically
        if (door.type == Door.DoorType.Sliding && door.isOpen)
        {
            door.Toggle(false, true);
        }

        if(lockTheDoorOnReset)
        {
            door.isLocked = true;
        }

        SetColour(defaultColor);
	}

    private void SetColour(Color newColour)
    {
        lightRenderer.GetPropertyBlock(materialBlock);
        materialBlock.SetColor("_Emission", newColour);
        lightRenderer.SetPropertyBlock(materialBlock);
    }

#endif // GAME_CORE
}

