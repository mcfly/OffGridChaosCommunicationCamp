// Copyright Semaeopus Ltd. 2017
// This code was created as part of LevelKit on: 2019-11-26 - 9:25
// DO NOT EDIT THIS FILE - Code changes will NOT be picked up and may break your project
// Visit http://wiki.offgridthegame.com for help - Happy Hacking!

using UnityEngine;

public class ViewCone : MonoBehaviour {

	[Range(0.01f, 1.0f)]
	public float noLightThreshold = 0.06f;
	[Range(0.01f, 1.0f)]
	public float lowLightThreshold = 0.15f;

    public Transform eyeballMarker;
    public LayerMask visionBlockedby;
	public float visibilityDistance;
    public Color GizmoColor;
	public float viewConeAngle = 120f;
	public float lightAngle = 30f;
	
	public void OnDrawGizmos()
	{
		#if GAME_CORE
		if (personality != null ) {
			GizmoColor = personality.favouriteColor;
		}
#endif // GAME_CORE

        if (eyeballMarker != null)
        {
            Gizmos.matrix = Matrix4x4.TRS(eyeballMarker.position, eyeballMarker.rotation, Vector3.one);
            Gizmos.color = new Color(GizmoColor.r, GizmoColor.g, GizmoColor.b, 0.5f);
            Gizmos.DrawFrustum(Vector3.zero, viewConeAngle, visibilityDistance, 0, 1);
        }
	}

#if GAME_CORE
	
	private Personality personality;
	private Transform playerHeadTransform;
	private LightLevelMonitor lightMonitor;
	

	private void OnEnable()
	{
		MissionRunnerBase.OnMissionStarted += OnMissionStarted;
	}

	private void OnDisable()
	{
		MissionRunnerBase.OnMissionStarted -= OnMissionStarted;
	}

	private void OnMissionStarted()
	{
		personality = gameObject.GetComponent<Personality>();
		playerHeadTransform = GameObject.FindGameObjectWithTag("PlayerHitTarget").transform;
		lightMonitor = FindObjectOfType<LightLevelMonitor>();
	}

    public bool CanSeeObject(GameObject obj) {
		bool canSeeTarget = false;

		// Check for invisible player:
		if (obj.CompareTag("Player")) {
			PlayerState p = obj.GetComponent<PlayerState>();
			if (p.invisible) {
				return false;
			}
		}

		// Check visibility for targert center:
        Vector3 targetCentre = obj.GetComponent<Collider>().bounds.center;
        if(isInViewCone(targetCentre, viewConeAngle) && !isHiddenFromView(targetCentre) && (Vector3.Distance(eyeballMarker.position, targetCentre) <= visibilityDistance)){
			if (!obj.CompareTag("Player")) {
				canSeeTarget = true;
			}
			else {
				float distance = Vector3.Distance(eyeballMarker.position, targetCentre);
				float lightLevel = lightMonitor.GetLightLevel();
				// in flashlight:
				if (isInViewCone(targetCentre, lightAngle)) {
					canSeeTarget = true;
				}
				// right next to target:
				else if (distance < 2.0f) {
					canSeeTarget = true;
				}
				// really close:
				else if (distance < 5f && lightLevel > noLightThreshold) {
					canSeeTarget = true;
				}
				// fairly close:
				else if (distance < 10f && lightLevel > lowLightThreshold) {
					canSeeTarget = true;
				}

			}
		}

		// IF player, check for head as well:
		if (obj.CompareTag("Player")) {
			Vector3 PlayerHead = playerHeadTransform.position;
			if (isInViewCone(PlayerHead, viewConeAngle) && !isHiddenFromView(PlayerHead) && (Vector3.Distance(eyeballMarker.position, PlayerHead) <= visibilityDistance)) {
				float distance = Vector3.Distance(eyeballMarker.position, PlayerHead);
				float lightLevel = lightMonitor.GetLightLevel();
				// in flashlight:
				if (isInViewCone(PlayerHead, lightAngle)) {
						canSeeTarget = true;
				}
				// right next to target:
				else if (distance < 2.0f) {
					canSeeTarget = true;
				}
				// really close:
				else if (distance < 5f && lightLevel > noLightThreshold) {
					canSeeTarget = true;
				}
				// fairly close:
				else if (distance < 10f && lightLevel > lowLightThreshold) {
					canSeeTarget = true;
				}

			}


		}
		return canSeeTarget;
    }
    

    private bool isInViewCone(Vector3 point, float viewAngle) {
        if(eyeballMarker != null)
        { 
        Vector3 vectorToPoint = point - eyeballMarker.position;
        float angle = Vector3.Angle(vectorToPoint, eyeballMarker.forward);
        // if angle is smaller than ViewConeAngle then point in question is in view cone so return true
        return (angle < viewAngle);
        }

        return false;
    }

    private bool isHiddenFromView(Vector3 point)
    {
	    return Physics.Linecast(eyeballMarker.position, point, visionBlockedby);
    }
	
#endif // GAME_CORE

}
