// Copyright Semaeopus Ltd. 2017
// This code was created as part of LevelKit on: 2019-11-26 - 9:25
// DO NOT EDIT THIS FILE - Code changes will NOT be picked up and may break your project
// Visit http://wiki.offgridthegame.com for help - Happy Hacking!

using UnityEngine;
using System.Collections;

[AddComponentMenu("Devices/Soda Machine")]
public class SodaMachine : Hackable 
{

	#region PUBLIC VARIABLES
	public ParticleSystem particles;
	public int frontMaterialIndex;
	#endregion
	
#if GAME_CORE

	#region PRIVATE VARIABLES
	private Material frontMaterial;
	#endregion

	#region UNITY & INIT

	protected void OnEnable()
    {
        base.OnEnable();
		frontMaterial = GetComponent<Renderer>().materials[frontMaterialIndex];
	}

	#endregion
    
	// Active means the device is doing what ever it's default "job" would be. Security camera actually monitoring things, printer spitting oput paper etc.
	public override void OnActiveChange(bool active)
	{
		frontMaterial.SetFloat("_Illumination", active ? 0.6f : 0f);
	}

	// Single-shot version of SetActive. For example printer printing single sheet, or vending machine spitting out single can of soda.
	// If single-shot action doesn't fit with the device, make it a short-timed one instead (single sweep of security camera, or open lock for 10 seconds etc)
	public override void OnRunOnce()
    {
		particles.Emit(1);
	}

	// Toggle chaotic, broken state. Smoke, sparks, bangs etc...
	public override void OnAmokChange(bool amok)
    {
        base.OnAmokChange(amok);
		if (amok)
        {
			particles.Play();
			StartCoroutine("BlinkDisplay");
		}
		else
        {
			particles.Stop();
		}
	}

	public override void SetValue(string newState) {
		float newSpeed = 0.0f;
		if (float.TryParse(newState, out newSpeed)) {
			var main = particles.main;
			main.startSpeed = newSpeed;
		}
	}

	public override string GetValue()
    {
		return null;
	}

	#region PRIVATE METHODS
	private IEnumerator BlinkDisplay() {
		while (GetAmok())
        {
			float brightness = Random.Range(0f, 1f);
			frontMaterial.SetFloat("_Illumination", brightness);
			yield return new WaitForSeconds(0.04f);
		}
	}
	#endregion
	
#endif // GAME_CORE

}
