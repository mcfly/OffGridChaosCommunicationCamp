// Copyright Semaeopus Ltd. 2017
// This code was created as part of LevelKit on: 2019-11-26 - 9:25
// DO NOT EDIT THIS FILE - Code changes will NOT be picked up and may break your project
// Visit http://wiki.offgridthegame.com for help - Happy Hacking!

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Rendering;

public class LightLevelMonitor : MonoBehaviour {

	public Renderer monitoredRenderer;
	private float lightLevel = 0.5f;

	public float GetLightLevel() {
		CalculateLightProbeLevelHuman();
		return lightLevel;
	}

	// Get the sampled spherical harmonics using LightProbes, and calculate averages from the first coefficient of all bands:
	private void CalculateLightProbeLevelSimple() {
		SphericalHarmonicsL2 harmonics = new SphericalHarmonicsL2();
		LightProbes.GetInterpolatedProbe(gameObject.transform.position, monitoredRenderer, out harmonics);
		float probeLevel = 0;
		for (int i = 0; i <= 2; i++) {
			probeLevel += harmonics[i, 0];
		}
		lightLevel = probeLevel / 3;
	}
	
	// Get the sampled spherical harmonics using LightProbes, and calculate human vision corrected average from the first coefficient of all bands:
	private void CalculateLightProbeLevelHuman() {
		SphericalHarmonicsL2 harmonics = new SphericalHarmonicsL2();
		LightProbes.GetInterpolatedProbe(gameObject.transform.position, monitoredRenderer, out harmonics);
		lightLevel = (0.2989f * harmonics[0,0]) + (0.5870f * harmonics[1,0]) + (0.1140f * harmonics[2,0]);
	}

	// Get the sampled spherical harmonics using LightProbes and calculate the average from all bands & coefficients:
	private void CalculateLightProbeLevel() {
		SphericalHarmonicsL2 harmonics = new SphericalHarmonicsL2();
		LightProbes.GetInterpolatedProbe(gameObject.transform.position, monitoredRenderer, out harmonics);
		float probeLevel = 0;
		for (int i = 0; i <= 2; i++) {
			float bandlevel = 0;
			for (int j = 0; j <= 8; j++) {
				bandlevel += harmonics[i, j];
			}
			probeLevel += bandlevel / 9;
		}
		//lightLevel = probeLevel / 3;
		lightLevel = probeLevel;
	}

}
