// Copyright Semaeopus Ltd. 2017
// This code was created as part of LevelKit on: 2019-11-26 - 9:25
// DO NOT EDIT THIS FILE - Code changes will NOT be picked up and may break your project
// Visit http://wiki.offgridthegame.com for help - Happy Hacking!

using System.Collections.Generic;
using System.Linq;
using UnityEditor;
using UnityEditor.AnimatedValues;
using UnityEngine;
using UnityEngine.SceneManagement;

public class AIExplorer : EditorWindow {

    [MenuItem("Off Grid/AI Explorer")]
    public static void ShowWindow()
    {
        GetWindow(typeof(AIExplorer));
    }

#if GAME_CORE
    private List<GoapAgent> goapAgents;
    private readonly List<IGoap> aiAgents = new List<IGoap>();
#endif

    private AnimBool[] fullInfoToggles;
    private Vector2[] actionScrolls;

    private Scene activeScene;

    private Vector2 scroll = new Vector2();

#if LEVEL_KIT
    public static AIExplorerHelper.AIExplorerDisplayData LevelKitData = null;
#endif
    
    private void OnEnable()
    {
        titleContent = new GUIContent("AI Explorer");

#if GAME_CORE
        if (goapAgents != null)
        {
            goapAgents.Clear();
        }
        aiAgents.Clear();
#endif
        UpdateCachedAgents();
    }

    private void UpdateCachedAgents()
    {
#if GAME_CORE
        aiAgents.Clear();

        goapAgents = FindObjectsOfType<GoapAgent>().ToList();

        int numAgents = goapAgents.Count;

        foreach (GoapAgent goapAgent in goapAgents)
        {
            aiAgents.Add(goapAgent.GetComponent<IGoap>());
        }

        fullInfoToggles = new AnimBool[numAgents];
        actionScrolls = new Vector2[numAgents];

        for (var i = 0; i < fullInfoToggles.Length; i++)
        {
            fullInfoToggles[i] = new AnimBool(false);
            fullInfoToggles[i].valueChanged.AddListener(Repaint);
        }
#elif LEVEL_KIT
        if(LevelKitData != null)
        {
            int numAgents = LevelKitData.agentNames.Count;

            if (fullInfoToggles == null || fullInfoToggles.Count() != numAgents)
            {
                fullInfoToggles = new AnimBool[numAgents];
                actionScrolls = new Vector2[numAgents];

                for (var i = 0; i < fullInfoToggles.Length; i++)
                {
                    fullInfoToggles[i] = new AnimBool(false);
                    fullInfoToggles[i].valueChanged.AddListener(Repaint);
                }
            }
        }
#endif
    }

    private void OnInspectorUpdate()
    {
        // Make sure we update state at least 10 times a second ( rate of inspector update )
        Repaint();
    }

	private void OnGUI()
	{
#if GAME_CORE
        if (Application.isPlaying)
		{
			if (goapAgents.Count == 0)
			{
				EditorGUILayout.LabelField("No goapAgents in current scene", EditorStyles.centeredGreyMiniLabel);
			}
			
			if (GUILayout.Button("Update"))
			{
				UpdateCachedAgents();
			}
			
			scroll = EditorGUILayout.BeginScrollView(scroll);
			for (var i = 0; i < goapAgents.Count; i++)
			{
				EditorGUILayout.BeginVertical("Box");
				GoapAgent goapAgent = goapAgents[i];
				AnimBool showFullInfo = fullInfoToggles[i];
				IGoap aiAgent = aiAgents[i];
                GoapAction[] actions = goapAgent.gameObject.GetComponents<GoapAction>();

                EditorGUILayout.LabelField(goapAgent.name, EditorStyles.boldLabel);

				GUILayout.BeginHorizontal();
				{
					if (GUILayout.Button("Select"))
					{
						Selection.activeGameObject = goapAgent.gameObject;
					}
					if (GUILayout.Button("Focus"))
					{
						if (SceneView.sceneViews.Count > 0)
						{
							SceneView view = (SceneView)SceneView.sceneViews[0];
							Selection.activeGameObject = goapAgent.gameObject;
							view.FrameSelected(true);
							view.Focus();
						}
					}
				}
				GUILayout.EndHorizontal();
				
				GoapAction currentAction = null;
				if (goapAgent.currentActions.Count > 0)
				{
					currentAction = goapAgent.currentActions.Peek();
				}
				EditorGUILayout.LabelField("Goal: " + GoapAgent.prettyPrint(goapAgent.currentActions));                
				EditorGUILayout.ObjectField("Target", currentAction != null ? currentAction.target : null, typeof(GameObject), false);

				showFullInfo.target = EditorGUILayout.ToggleLeft("View full state", showFullInfo.target);
				if (EditorGUILayout.BeginFadeGroup(showFullInfo.faded))
				{
					string worldState = "World state: \n" + aiAgent.getWorldState().PrettyPrint(true);
					string goalState = "Goal state: \n" + goapAgent.currentGoal.PrettyPrint(true);
					string[] states = {worldState, goalState};

					// List states
					EditorGUILayout.LabelField("Agent State", EditorStyles.boldLabel);
					++EditorGUI.indentLevel;
					foreach (string state in states)
					{
						GUIStyle infoStyle = new GUIStyle("textField");
						Vector2 textSize = infoStyle.CalcSize(new GUIContent {text = state});
					
						EditorGUILayout.BeginVertical("Box");
						EditorGUILayout.SelectableLabel(state, EditorStyles.textField, GUILayout.MinWidth(textSize.x), GUILayout.MinHeight(textSize.y));
						EditorGUILayout.EndVertical();
					}
					--EditorGUI.indentLevel;
                    
                    {
                        ModularAgent modularAgent = aiAgent as ModularAgent;
                        if (modularAgent != null)
                        {
                            EditorGUILayout.LabelField("Goal List", EditorStyles.boldLabel);

                            List<string> goalStringList = modularAgent.printGoalInformation();
                            foreach (string goalString in goalStringList)
                            {
                                EditorGUILayout.BeginVertical("Box");

                                GUIStyle style = new GUIStyle(EditorStyles.textField) { richText = true };                                
                                Vector2 textSize = style.CalcSize(new GUIContent { text = goalString });
                                EditorGUILayout.SelectableLabel(goalString, style, GUILayout.MinWidth(textSize.x), GUILayout.MinHeight(textSize.y));

                                EditorGUILayout.EndVertical();
                            }
                        }
                    }

                    EditorGUILayout.LabelField("Available Actions", EditorStyles.boldLabel);

					actionScrolls[i] = EditorGUILayout.BeginScrollView(actionScrolls[i], GUILayout.Height(250));
					{
						++EditorGUI.indentLevel;
						// List possible actions
						foreach (GoapAction action in goapAgent.availableActions)
						{
							string actionName = action.actionName;

							if (currentAction && action.actionName == currentAction.actionName)
							{
								actionName += " <- Current";
							}

							EditorGUILayout.LabelField(actionName, EditorStyles.boldLabel);

						    GUI.enabled = false;
						    EditorGUILayout.ObjectField("Target", action.target, typeof(GameObject), false);
						    GUI.enabled = true;

							EditorGUILayout.BeginVertical("Box");
							++EditorGUI.indentLevel;
							{
								GUIStyle condEffectStyle = new GUIStyle(EditorStyles.textField) {richText = true};
								string preconditions = "Preconditions: \n" + action.Preconditions.PrettyPrint(aiAgent.getWorldState(), actions);
								string effects = "Effects: \n" + action.Effects.PrettyPrint(true);

								Vector2 textSize = condEffectStyle.CalcSize(new GUIContent {text = preconditions});
								EditorGUILayout.SelectableLabel(preconditions, condEffectStyle, GUILayout.MinWidth(textSize.x),
									GUILayout.MinHeight(textSize.y));

								textSize = condEffectStyle.CalcSize(new GUIContent {text = effects});
								EditorGUILayout.SelectableLabel(effects, condEffectStyle, GUILayout.MinWidth(textSize.x),
									GUILayout.MinHeight(textSize.y));
							}

							--EditorGUI.indentLevel;
							EditorGUILayout.EndVertical();
						}
						--EditorGUI.indentLevel;

					}
					EditorGUILayout.EndScrollView();

				}
				EditorGUILayout.EndFadeGroup();
				EditorGUILayout.EndVertical();
			}
			EditorGUILayout.EndScrollView();
		}
        else
		{
			EditorGUILayout.LabelField("AI Explorer only available whilst game is running", EditorStyles.centeredGreyMiniLabel);
		}
#endif
#if LEVEL_KIT
        if (LevelKitData != null)
        {
            UpdateCachedAgents(); // make sure UI stuff is initialised

            scroll = EditorGUILayout.BeginScrollView(scroll);
            for (int i = 0; i < LevelKitData.agentNames.Count; i++)
            {
                EditorGUILayout.BeginVertical("Box");
                AnimBool showFullInfo = fullInfoToggles[i];

                EditorGUILayout.LabelField(LevelKitData.agentNames[i], EditorStyles.boldLabel);                
                EditorGUILayout.LabelField("Goal: " + LevelKitData.goals[i]);
                //EditorGUILayout.ObjectField("Target", currentAction != null ? currentAction.target : null, typeof(GameObject), false);

                showFullInfo.target = EditorGUILayout.ToggleLeft("View full state", showFullInfo.target);
                if (EditorGUILayout.BeginFadeGroup(showFullInfo.faded))
                {
                    string worldState = "World state: \n" + LevelKitData.worldState[i];
                    string goalState = "Goal state: \n" + LevelKitData.goalState[i];
                    string[] states = { worldState, goalState };

                    // List states
                    EditorGUILayout.LabelField("Agent State", EditorStyles.boldLabel);
                    ++EditorGUI.indentLevel;
                    foreach (string state in states)
                    {
                        GUIStyle infoStyle = new GUIStyle("textField");
                        Vector2 textSize = infoStyle.CalcSize(new GUIContent { text = state });

                        EditorGUILayout.BeginVertical("Box");
                        EditorGUILayout.SelectableLabel(state, EditorStyles.textField, GUILayout.MinWidth(textSize.x), GUILayout.MinHeight(textSize.y));
                        EditorGUILayout.EndVertical();
                    }
                    --EditorGUI.indentLevel;

                    {
                        if (LevelKitData.modularGoals[i] != null)
                        {
                            EditorGUILayout.LabelField("Goal List", EditorStyles.boldLabel);

                            foreach (string goalString in LevelKitData.modularGoals[i])
                            {
                                EditorGUILayout.BeginVertical("Box");

                                GUIStyle style = new GUIStyle(EditorStyles.textField) { richText = true };
                                Vector2 textSize = style.CalcSize(new GUIContent { text = goalString });
                                EditorGUILayout.SelectableLabel(goalString, style, GUILayout.MinWidth(textSize.x), GUILayout.MinHeight(textSize.y));

                                EditorGUILayout.EndVertical();
                            }
                        }
                    }

                    EditorGUILayout.LabelField("Available Actions", EditorStyles.boldLabel);

                    actionScrolls[i] = EditorGUILayout.BeginScrollView(actionScrolls[i], GUILayout.Height(250));
                    {
                        ++EditorGUI.indentLevel;
                        // List possible actions
                        for(int j = 0; j < LevelKitData.actionNames[i].Count; ++j)
                        {                            
                            EditorGUILayout.LabelField(LevelKitData.actionNames[i][j], EditorStyles.boldLabel);

                            //GUI.enabled = false;
                            //EditorGUILayout.ObjectField("Target", action.target, typeof(GameObject), false);
                            //GUI.enabled = true;

                            EditorGUILayout.BeginVertical("Box");
                            ++EditorGUI.indentLevel;
                            {
                                GUIStyle condEffectStyle = new GUIStyle(EditorStyles.textField) { richText = true };
                                string preconditions = "Preconditions: \n" + LevelKitData.actionPreconditions[i][j];
                                string effects = "Effects: \n" + LevelKitData.actionEffects[i][j];

                                Vector2 textSize = condEffectStyle.CalcSize(new GUIContent { text = preconditions });
                                EditorGUILayout.SelectableLabel(preconditions, condEffectStyle, GUILayout.MinWidth(textSize.x),
                                    GUILayout.MinHeight(textSize.y));

                                textSize = condEffectStyle.CalcSize(new GUIContent { text = effects });
                                EditorGUILayout.SelectableLabel(effects, condEffectStyle, GUILayout.MinWidth(textSize.x),
                                    GUILayout.MinHeight(textSize.y));
                            }

                            --EditorGUI.indentLevel;
                            EditorGUILayout.EndVertical();
                        }
                        --EditorGUI.indentLevel;

                    }
                    EditorGUILayout.EndScrollView();

                }
                EditorGUILayout.EndFadeGroup();
                EditorGUILayout.EndVertical();
            }
            EditorGUILayout.EndScrollView();
        }
        else
        {
            EditorGUILayout.LabelField("No data to display - Hit update in LevelKit Networking Tab", EditorStyles.centeredGreyMiniLabel);
        }
#endif
    }
}
