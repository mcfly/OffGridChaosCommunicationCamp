// Copyright Semaeopus Ltd. 2017
// This code was created as part of LevelKit on: 2019-11-26 - 9:25
// DO NOT EDIT THIS FILE - Code changes will NOT be picked up and may break your project
// Visit http://wiki.offgridthegame.com for help - Happy Hacking!

using System;
using System.IO;
using System.Threading;
using System.Net.Sockets;

namespace LevelKitNet
{
    /// <summary>
    /// A TCP client designed to be run on an instance of LevelKit
    /// </summary>
    public class Client : Service
    {
        /// <summary>
        /// THREAD
        /// Listen for messages from the server
        /// </summary>
        private Thread m_ListenThread;

        /// <summary>
        /// The client socket
        /// </summary>
        private Socket m_Server;

        /// <summary>
        /// The lock for the sending data on the server socket
        /// </summary>
        private readonly object m_ServerSendLock = new object();
        
        /// <summary>
        /// The lock for the receiving data on the server socket
        /// </summary>
        private readonly object m_ServerReceiveLock = new object();

        /// <summary>
        /// Is the socket attempting to connect?
        /// </summary>
        private bool m_IsConnecting = false;

        /// <summary>
        /// Attempt to connect to the server
        /// </summary>
        public void Connect()
        {
            try
            {
                m_Server = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp)
                {
                    NoDelay = true,
                    LingerState = new LingerOption(false, 0)
                };
            }
            catch (SocketException e)
            {
                Log("Failed to create client socket: {0}", e.Message);
                throw;
            }
            
            try
            {
                m_IsConnecting = true;

                m_Server.BeginConnect("127.0.0.1", m_Port, OnConnectionFinish, m_Server);
                m_ListenThread = new Thread(Thread_ListenForMessages)
                {
                    Name = "LeveKitNet - Server Listen For Messages"
                };
            }
            catch (SocketException e)
            {
                Console.WriteLine("SocketException: {0}", e);
                m_ListenThread.Abort();
            }
        }

        /// <summary>
        /// Shut everything down
        /// </summary>
        public void Disconnect()
        {
            if (isConnected())
            {
                lock (m_ServerReceiveLock)
                {
                    m_Server.Close();
                }
            }
            
            if (m_ListenThread != null && m_ListenThread.IsAlive)
            {
                m_ListenThread.Join();
            }
        }

        /// <summary>
        /// Receive information about a connection attempt
        /// </summary>
        /// <param name="result"></param>
        private void OnConnectionFinish(IAsyncResult result)
        {
            Socket clientSocket = (Socket)result.AsyncState;
            m_IsConnecting = false;
            
            try
            {
                clientSocket.EndConnect(result);
            }
            catch (SocketException ex )
            {
                Log("Failed to connect \"{0}\"", ex.Message);
            }

            if (clientSocket.Connected && !m_ListenThread.IsAlive)
            {
                Send(new ConnectMsg());
                m_ListenThread.Start();
            }
        }

        /// <summary>
        /// Is the client connected?
        /// </summary>
        public bool isConnected()
        {
            // Only do extra check if the socket thinks it's connected
            if (null != m_Server && m_Server.Connected)
            {
                // Code from https://stackoverflow.com/questions/2661764/how-to-check-if-a-socket-is-connected-disconnected-in-c
                bool part1 = m_Server.Poll(1000, SelectMode.SelectRead);
                bool part2 = (m_Server.Available == 0);
                return !part1 || !part2;
            }
            return false;
        }

        /// <summary>
        /// Is the client attempting to connect?
        /// </summary>
        public bool IsConnecting()
        {
            return m_IsConnecting;
        }

        /// <summary>
        /// Send a message to the server
        /// </summary>
        /// <param name="message"></param>
        public void Send(NetMessage message)
        {
            lock (m_ServerSendLock)
            {
                try
                {
                    BinaryWriter writer = new BinaryWriter(new NetworkStream(m_Server));

                    // Send hash of the message name so it can be re-created on the other side
                    int hash = message.GetType().Name.GetHashCode();
                    writer.Write(hash);

                    // Serialise the message
                    message.Serialise(writer);
                }
                catch (Exception)
                {
                    Log("Game instance disconnected");
                }
            }
        }

        /// <summary>
        /// Loop listening to messages from the server
        /// </summary>
        private void Thread_ListenForMessages()
        {
            while (isConnected())
            {
                lock (m_ServerReceiveLock)
                {
                    try
                    {
                        NetworkStream stream = new NetworkStream(m_Server);
                        BinaryReader reader = new BinaryReader(stream);
                        if (stream.DataAvailable && stream.CanRead)
                        {
                            int messageHash = reader.ReadInt32();

                            NetMessage message = CreateMessageFromHash(messageHash);
                            if (message != null)
                            {
                                message.Deserialise(reader);
                                AddMessage(message);
                            }
                        }
                    }
                    catch (Exception)
                    {
                        Log("Game instance disconnected");
                        break;
                    }
                }
            }

            Log("Client listening for messages thread closing");
        }
    }
}
