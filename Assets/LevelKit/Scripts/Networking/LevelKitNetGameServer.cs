// Copyright Semaeopus Ltd. 2017
// This code was created as part of LevelKit on: 2019-11-26 - 9:25
// DO NOT EDIT THIS FILE - Code changes will NOT be picked up and may break your project
// Visit http://wiki.offgridthegame.com for help - Happy Hacking!

using System.Collections.Generic;
#if GAME_CORE
using UnityEngine;
using UnityEngine.SceneManagement;
using LevelKitNet;
using PlatformService;
using System.Linq;
#if UNITY_EDITOR
using UnityEditor;
#endif

public class LevelKitNetGameServer : MonoBehaviour
{
	public Server levelKitServer { get; private set; }
	private static LevelKitNetGameServer instance = null;
	public static LevelKitNetGameServer Instance
	{
		get { return instance ?? new GameObject("LevelKitNetGameServer").AddComponent<LevelKitNetGameServer>(); }
		private set { instance = value; }
	}

	private UGCItem currentlyUploadingItem = null;
	private UploadModMsg uploadingModInfo = null;
	
	// Cached progress msg
	private readonly ProgressMsg progressMsg = new ProgressMsg();

    private bool isSendingAIExplorerData = false;
    private AIExplorerDataMsg aiDataMsg = new AIExplorerDataMsg();

    private void Start()
	{
		// We only want one server object at a time
		if (!instance)
		{
			DontDestroyOnLoad(this);

#if !PLATFORM_XBOXONE
            levelKitServer = new Server();
			levelKitServer.Start();
			levelKitServer.RegisterCallback<StartMissionMsg>(StartMission);
			levelKitServer.RegisterCallback<StopMissionMsg>(StopMission);
			levelKitServer.RegisterCallback<UploadModMsg>(UploadMod);
			levelKitServer.RegisterCallback<ConnectMsg>(ClientConnected);
			levelKitServer.RegisterCallback<CurrentModsMsg>(UpdateLevelKitMods);
            levelKitServer.RegisterCallback<AIExplorerMsg>(UpdateAIExplorer);
			Logger.OnLog += OnLog;
#endif
			instance = this;
		}
		else
		{
			DestroyImmediate(gameObject);
		}
	}

	// Update is called once per frame
	private void Update () 
	{
#if !PLATFORM_XBOXONE
        levelKitServer.Update();

        if (levelKitServer.ClientConnected()
            && null != currentlyUploadingItem
            && currentlyUploadingItem.itemState == UGCItem.ItemState.Uploading)
        {
#if PLATFORM_DRM_FREE
            if (currentlyUploadingItem.UploadStatus(out progressMsg.progress, ref progressMsg.progressText))
			{
				levelKitServer.Send(progressMsg);
			}
#endif
        }

        if (levelKitServer.ClientConnected() && isSendingAIExplorerData)
        {
            AIExplorerHelper.BuildDisplayData(aiDataMsg.data);
            levelKitServer.Send(aiDataMsg);
            isSendingAIExplorerData = false; // temp 
        }
#endif
    }

	private void OnApplicationQuit()
	{
		PlayerPrefs.DeleteKey("Net_LoadFromFolder");
		levelKitServer.Stop();
	}
	
	private void OnLog(Channel channel, Priority priority, string message)
	{
		if (levelKitServer.ClientConnected())
		{
			SendLogMsg sendLogMsg = new SendLogMsg
			{
				logMessage = message,
			};

			switch (priority)
			{
				case Priority.Info:
					sendLogMsg.logType = LogType.Log;
					break;
				case Priority.Warning:
					sendLogMsg.logType = LogType.Warning;
					break;
				case Priority.Error:
					sendLogMsg.logType = LogType.Error;
					break;
				case Priority.FatalError:
					sendLogMsg.logType = LogType.Error;
					break;
			}
			
			levelKitServer.Send(sendLogMsg);
		}
	}
	
	// Networking callbacks
	
	private void UploadMod(NetMessage message)
	{
#if PLATFORM_DRM_FREE
        if (currentlyUploadingItem == null)
		{
			uploadingModInfo = (UploadModMsg) message;

			currentlyUploadingItem = new UGCItem((ulong)uploadingModInfo.definition.id);
			
			if (currentlyUploadingItem.IsValid())
			{
				OnCreated(true);
			}
			else
			{
				currentlyUploadingItem.CreateItem(OnCreated);
			}
		}
#endif
	}
	
	private void OnCreated(bool successful)
	{
#if PLATFORM_DRM_FREE
        if (successful)
		{
			if (currentlyUploadingItem.BeginEditing())
			{
				currentlyUploadingItem.itemLocation = uploadingModInfo.modPath;
				currentlyUploadingItem.title = uploadingModInfo.definition.name;
				currentlyUploadingItem.description = uploadingModInfo.definition.description;
				currentlyUploadingItem.previewImage = uploadingModInfo.iconPath;
				currentlyUploadingItem.visibilityType = (UGCItem.VisibilityType) uploadingModInfo.visibility;
				if (!currentlyUploadingItem.SubmitEdits(OnSubmitted))
				{
					currentlyUploadingItem = null;
				}
			}
			else
			{
				Logger.Log(Channel.Platform, "Failed to start editing Mod {0}, are you the creator?");
				currentlyUploadingItem = null;
			}
		}
#endif
    }

	private void OnSubmitted(bool wasSuccessful)
	{
		Logger.Log(Channel.Platform, "Mod {0} uploaded {1} with id {2}", uploadingModInfo.definition.name, wasSuccessful ? "successfully" : "unsucessfully", currentlyUploadingItem.id);
		if (levelKitServer.ClientConnected())
		{
			levelKitServer.Send(new CompletedUploadMsg
			{
				wasSuccess =  wasSuccessful,
				id = (long)currentlyUploadingItem.id,
				modPath = currentlyUploadingItem.itemLocation,
			});
			levelKitServer.Send(new ClearProgressMsg());
		}
		currentlyUploadingItem = null;
	}

	private static void StopMission(NetMessage message)
	{
		SceneManager.LoadScene("MainMenuScene");
	}
	
	private void StartMission(NetMessage message)
	{
		StartMissionMsg startMsg = (StartMissionMsg)message;
		Debug.Log("Start Mission: " + startMsg.missionPath);
			
		PlayerPrefs.SetString("Net_LoadFromFolder", startMsg.missionPath);
#if UNITY_EDITOR
		EditorPrefs.SetBool("JumpToLastMissionPlayed", false);
#endif
		
		AkSoundEngine.PostEvent("PauseMenu_ButtonPress", gameObject);
		SaveSystem.Instance.ClearCurrent();

		SceneManager.LoadScene("CityMapScene");
	}
	
	private void ClientConnected(NetMessage message)
	{
		levelKitServer.Send(new BuildInformationMsg
		{
			dateOfBuild = BuildConstants.BuildTime.ToString("dd/MM/yyy - HH:mm tt"),
			platform = Utils.GetCurrentPlatform().ToString(),
		});
	}

	private void UpdateLevelKitMods(NetMessage netMessage)
	{
		CurrentModsMsg currentModsMsg = (CurrentModsMsg) netMessage;

		if (currentModsMsg.modPaths.Count > 0)
		{
			ModManager.Instance.UpdateLevelKitMods(currentModsMsg.modPaths);
		}
	}

    private void UpdateAIExplorer(NetMessage netMessage)
    {
        AIExplorerMsg aiMsg = netMessage as AIExplorerMsg;
        isSendingAIExplorerData = aiMsg.on;
    }
}
#endif //GAME_CORE

    public class AIExplorerHelper
{
    // for sending over the levelkit connection
    public class AIExplorerDisplayData
    {
        public List<string> agentNames = new List<string>();
        public List<string> goals = new List<string>();
        public List<string> targets = new List<string>();
        public List<string> worldState = new List<string>();
        public List<string> goalState = new List<string>();
        public List<List<string>> modularGoals = new List<List<string>>();
        public List<List<string>> actionNames = new List<List<string>>();
        public List<List<string>> actionTargets = new List<List<string>>();
        public List<List<string>> actionPreconditions = new List<List<string>>();
        public List<List<string>> actionEffects = new List<List<string>>();

        public void Clear()
        {
            agentNames.Clear();
            goals.Clear();
            targets.Clear();
            worldState.Clear();
            goalState.Clear();

            modularGoals.Clear();
            actionNames.Clear();
            actionTargets.Clear();
            actionPreconditions.Clear();
            actionEffects.Clear();
        }

        public bool used = false;
    }

#if GAME_CORE
    public static void BuildDisplayData(AIExplorerDisplayData toPopulate)
    {
        toPopulate.Clear();

        GoapAgent[] goapAgents = GameObject.FindObjectsOfType<GoapAgent>();

        int numAgents = goapAgents.Length;

        for (int index = 0; index < numAgents; ++index)
        {   // now build the data in a similar way to the way it's displayed in the normal case
            GoapAgent goapAgent = goapAgents[index];

            IGoap agent = goapAgent.GetComponent<IGoap>();
            toPopulate.agentNames.Add(goapAgent.name);

            GoapAction currentAction = null;
            if (goapAgent.currentActions.Count > 0)
            {
                currentAction = goapAgent.currentActions.Peek();
            }

            toPopulate.goals.Add(GoapAgent.prettyPrint(goapAgent.currentActions));
            toPopulate.targets.Add(currentAction != null ? currentAction.target.ToString() : string.Empty);
            toPopulate.worldState.Add(agent.getWorldState().PrettyPrint(true));
            toPopulate.goalState.Add(goapAgent.currentGoal.PrettyPrint(true));


#if !PLATFORM_XBOXONE
            if (agent is ModularAgent modularAgent)
#else
            ModularAgent modularAgent = agent as ModularAgent;
                 if (modularAgent != null)
#endif
            {

                toPopulate.modularGoals.Add(modularAgent.printGoalInformation());
            }
            else
            {
                toPopulate.modularGoals.Add(new List<string>(0));
            }

            toPopulate.actionNames.Add(new List<string>()); // add the list that we are about to index.
            toPopulate.actionTargets.Add(new List<string>()); // add the list that we are about to index.
            toPopulate.actionPreconditions.Add(new List<string>()); // add the list that we are about to index.
            toPopulate.actionEffects.Add(new List<string>()); // add the list that we are about to index.
            foreach (GoapAction action in goapAgent.availableActions)
            {
                toPopulate.actionNames[index].Add(action.actionName);
                toPopulate.actionTargets[index].Add(action.target == null ? string.Empty : action.target.ToString());
                toPopulate.actionPreconditions[index].Add(action.Preconditions.PrettyPrint(agent.getWorldState(), goapAgent.availableActions.ToArray()));
                toPopulate.actionEffects[index].Add(action.Effects.PrettyPrint(true));
            }
        }
    }
#endif
        }
