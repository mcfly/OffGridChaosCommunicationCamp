// Copyright Semaeopus Ltd. 2017
// This code was created as part of LevelKit on: 2019-11-26 - 9:25
// DO NOT EDIT THIS FILE - Code changes will NOT be picked up and may break your project
// Visit http://wiki.offgridthegame.com for help - Happy Hacking!

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Playables;
using UnityEngine.Timeline;

public class CharacterControlBehaviour : PlayableBehaviour {

	public string internalName;
	public bool controlled;
#if GAME_CORE
	private MissionRunner mr;

	public override void ProcessFrame(Playable playable, FrameData info, object playerData) {

		mr = playerData as MissionRunner;
		if (mr != null && !controlled) {
			GameObject character = null;
			if (mr.characters.TryGetValue(internalName, out character)) {
				GoapAgent goapAgent = character.GetComponent<GoapAgent>();
				if (goapAgent != null) {
					goapAgent.paused = true;
					NetDevice nd = character.GetComponent<NetDevice>();
					nd.Hide();

					ModularAgent ma = character.GetComponent<ModularAgent>();
					if (ma != null) {
						ma.Pause();
					}
				}
				//AnimationControlComponent ac = character.GetComponent<AnimationControlComponent>();
				//if (ac != null) {
				//	ac.enabled = false;
				//}
				Rigidbody rb = character.GetComponent<Rigidbody>();
				if (rb != null) {
					rb.isKinematic = true;
				}
				controlled = true;
			}
		}

	}

	public override void OnBehaviourPause(Playable playable, FrameData info) {
		if (controlled && mr != null) {
			GameObject character = null;
			if (mr.characters.TryGetValue(internalName, out character)) {
				GoapAgent goapAgent = character.GetComponent<GoapAgent>();
				if (goapAgent != null) {
					goapAgent.paused = false;
					NetDevice nd = character.GetComponent<NetDevice>();
					nd.Show();
				}
			}
			//AnimationControlComponent ac = character.GetComponent<AnimationControlComponent>();
			//if (ac != null) {
			//	ac.enabled = true;
			//}
			Rigidbody rb = character.GetComponent<Rigidbody>();
			if (rb != null) {
				rb.isKinematic = false;
			}
			controlled = false;
		}
	}
#endif
}
