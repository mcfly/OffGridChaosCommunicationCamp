// Copyright Semaeopus Ltd. 2017
// This code was created as part of LevelKit on: 2019-11-26 - 9:25
// DO NOT EDIT THIS FILE - Code changes will NOT be picked up and may break your project
// Visit http://wiki.offgridthegame.com for help - Happy Hacking!

using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.Playables;
using UnityEngine.SceneManagement;
using UnityEngine.Timeline;
using UnityEngine.Video;

[RequireComponent(typeof(PlayableDirector))]
public class TimelineSetup : MonoBehaviour
{
    private TimelineAsset timeline;
    private PlayableDirector director;

	private TrackAsset trackJoe;

#if GAME_CORE
	private GameState gameState;

    void OnEnable()
    {

        MissionRunner.OnMissionStarted += OnMissionStarted;
		director = GetComponent<PlayableDirector>();
		timeline = director.playableAsset as TimelineAsset;

	}


    void OnDisable()
    {
	     MissionRunner.OnMissionStarted -= OnMissionStarted;
	}

private void Update() {
		if (gameState) {
			if (gameState.Paused && director.state == PlayState.Playing) {
				director.Pause();
				if (director.playableGraph.IsValid()) {
					director.playableGraph.GetRootPlayable(0).SetSpeed(0);
				}
			}
			else if (!gameState.Paused && director.state == PlayState.Paused) {
				director.Resume();
				if (director.playableGraph.IsValid()) {
					director.playableGraph.GetRootPlayable(0).SetSpeed(1);
				}
			}
		}
		else {
			gameState = FindObjectOfType<GameState>();
		}
	}


	void OnMissionStarted()
    {
		// Locate Player in the scene, and rebind "Joe" track to that GameObject
		// TODO: Shouldn't be called "Joe", that might not be the current player character....
        GameObject joe = GameObject.FindGameObjectWithTag("Player");
        foreach (TrackAsset asset in timeline.GetRootTracks())
        {            
            if(asset.name == "Characters")
            {
                foreach (TrackAsset child in asset.GetChildTracks())
                {
                    if (child.name == "Joe")
                    {
                        trackJoe = child.GetChildTracks().First<TrackAsset>();
                        continue;
                    }
                }
                break;
            }
        }
        if (director.GetGenericBinding(trackJoe) == null)
        {
            director.SetGenericBinding(trackJoe, joe);
        }


        GameObject camera = GameObject.Find("Camera");
		// or maybe: GameObject camera = Camera.main.gameObject;
		foreach (TrackAsset asset in timeline.GetOutputTracks())
        {
            // if (asset is Cinemachine.Timeline.CinemachineTrack)
            if(asset.GetType().Name == "CinemachineTrack")
            {
                director.SetGenericBinding(asset, camera);
            }
        }

        MissionRunner mr = FindObjectOfType<MissionRunner>();
        foreach (TrackAsset asset in timeline.GetOutputTracks())
        {
            MissionTrack m = asset as MissionTrack;
            if (m != null)
            {
                director.SetGenericBinding(asset, mr);
            }
			CharacterControlTrack c = asset as CharacterControlTrack;
			if (c != null) {
				director.SetGenericBinding(asset, mr);
			}
		}

		// Rebind NPC's and Enemies in the scene:
		foreach (KeyValuePair<string, GameObject> character in mr.characters) {
			TrackAsset characterTrack = null; 
			foreach (TrackAsset asset in timeline.GetRootTracks()) {
				if (asset.name == "Characters") {
					foreach (TrackAsset child in asset.GetChildTracks()) {
						if (child.name == character.Key) {
							characterTrack = child.GetChildTracks().First<TrackAsset>();
							if (characterTrack != null) {
								GameObject sceneObject = director.GetGenericBinding(characterTrack) as GameObject;
								director.SetGenericBinding(characterTrack, character.Value);
								sceneObject.SetActive(false);
							}
							continue;
						}
					}
				}
			}
		}

		OffGridUI ui = FindObjectOfType<OffGridUI>();
        foreach (TrackAsset asset in timeline.GetOutputTracks())
        {
            UITrack t = asset as UITrack;
            if (t != null)
            {
                director.SetGenericBinding(asset, ui);
            }
        }
        
        VideoPlayer vp = FindObjectOfType<VideoPlayer>();
        if (vp != null)
        {
            camera.gameObject.AddComponent<AudioListener>();

            foreach (TrackAsset asset in timeline.GetOutputTracks())
            {
                VideoTrack t = asset as VideoTrack;
                if (t != null)
                {
                    director.SetGenericBinding(asset, vp);
                }
            }
        }

		MissionObject mo = gameObject.GetComponent<MissionObject>();
		if (mo != null) {
			director.played += mo.OnTimelinePlay;
			director.paused += mo.OnTimelinePause;
			director.stopped += mo.OnTimelineStop;
		} 

		//director.RebuildGraph();


       // director.Play();
    }
#endif

}

