// Copyright Semaeopus Ltd. 2017
// This code was created as part of LevelKit on: 2019-11-26 - 9:25
// DO NOT EDIT THIS FILE - Code changes will NOT be picked up and may break your project
// Visit http://wiki.offgridthegame.com for help - Happy Hacking!

using UnityEngine;
 
public class Water : MonoBehaviour
{
	private readonly Vector3 waveSource1 = new Vector3 (2.0f, 0.0f, 2.0f);
	public float waveFrequency = 0.53f;
	public float waveHeight = 0.48f;
	public float waveLength = 0.71f;
	private Mesh mesh;
	private Vector3[] verts;

	private void Start () {
		MeshFilter mf = GetComponent<MeshFilter> ();
		mesh = Instantiate(mf.mesh);
		//mf.sharedMesh = mesh;
		mf.mesh = mesh;
		MakeMeshLowPoly ();
	}

	// Update is called once per frame
	private void Update() {
		CalcWave();
	}

	private void MakeMeshLowPoly () {
		Vector3[] oldVerts = mesh.vertices;
		int[] triangles = mesh.triangles;
		Vector3[] vertices = new Vector3[triangles.Length];
		for (int i = 0; i < triangles.Length; i++) {
			vertices [i] = oldVerts [triangles [i]];
			triangles [i] = i;
		}
		mesh.vertices = vertices;
		mesh.triangles = triangles;
		mesh.RecalculateBounds ();
		mesh.RecalculateNormals ();
		verts = mesh.vertices;
	}

	private void CalcWave ()
	{
		for (int i = 0; i < verts.Length; i++) {
			Vector3 v = verts [i];
			v.y = 0.0f;
			float dist = Vector3.Distance (v, waveSource1);
			dist = (dist % waveLength) / waveLength;
			v.y = waveHeight * Mathf.Sin (Time.time * Mathf.PI * 2.0f * waveFrequency
			+ (Mathf.PI * 2.0f * dist));
			verts [i] = v;
		}
		mesh.vertices = verts;
		mesh.RecalculateNormals (); 
		mesh.MarkDynamic ();
	
		GetComponent<MeshFilter> ().mesh = mesh;
	}
}
