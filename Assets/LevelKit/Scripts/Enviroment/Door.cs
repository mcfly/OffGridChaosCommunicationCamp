// Copyright Semaeopus Ltd. 2017
// This code was created as part of LevelKit on: 2019-11-26 - 9:25
// DO NOT EDIT THIS FILE - Code changes will NOT be picked up and may break your project
// Visit http://wiki.offgridthegame.com for help - Happy Hacking!

using UnityEngine;
#if UNITY_EDITOR
using UnityEditor;
#endif

[RequireComponent(typeof(SaveGUID))]
[DisallowMultipleComponent]
public class Door : MonoBehaviour
{
    public enum DoorType
    {
        Swinging,
        Sliding,
		Gate,
    }

    [System.Serializable]
    public class DoorInfo
    {
        public string guid = string.Empty;
        public DoorType type = DoorType.Swinging;
        public string zone = "Default";
        public bool isLocked = false;
        public bool isOpen = false;
        public int openDirection;
        
        public DoorInfo(DoorInfo other)
        {
            guid = other.guid;
            type = other.type;
            zone = other.zone;
            isLocked = other.isLocked;
            isOpen = other.isOpen;
            openDirection = other.openDirection;
        }
    }

    public DoorInfo info;

#if GAME_CORE
    public bool isOpen
    {
        get { return info.isOpen; }
        private set { info.isOpen = value; }
    }

    public bool isLocked
    {
        get { return info.isLocked; }
        set { info.isLocked = value; }
    }

    public DoorType type
    {
        get { return info.type; }
    }

    public string zone
    {
        get { return info.zone; }
    }

    private int openDirection
    {
        get { return info.openDirection; }
        set { info.openDirection = value; }
    }
    
    private Animator animator = null;

	public void Awake() {
		SaveGUID doorGuid = GetComponent<SaveGUID>();
		if (doorGuid) {
			info.guid = doorGuid.guid;
		}

		animator = GetComponentInChildren<Animator>();
		/// TODO: This section is only here to handle legacy doors, remove one they've been converted to new prefab structure!
		if (!animator) {
			animator = GetComponent<Animator>();
		}
		/// end legacy stuff
		if (!animator) {
			Logger.Log(Channel.Loading, Priority.FatalError, "Door {0} is missing an Animator, this door will not function", name);
		}
	}

	///This is called by the UnityEvents on the door handles!
    public void Toggle(GameObject toggler)
    {
        Vector3 togglerToDoor = transform.position - toggler.transform.position; // don't think this needs to be normalized
        float dot = Vector3.Dot(transform.forward, togglerToDoor); // up is z, essentially (Blender)

        if(dot < 0.0f)
        {
            Toggle(!isOpen, false);
        }
        else
        {
            Toggle(!isOpen, true);
        }        
    }

    public bool Toggle(bool open, bool fromFront)
    {
		// door is closed, and trying to open it:
		if(open && !isOpen) {
			
			if (isLocked) {
				OffGridSound.SoundEvent("Play_DoorLocked", gameObject);
				return false;
			}

			openDirection = fromFront ? 1 : -1;
			
			switch (info.type) {
				case DoorType.Swinging:
					OffGridSound.SoundEvent("Play_DoorOpening", this.gameObject);
					animator.SetInteger("OpenDirection", openDirection);
					break;
				case DoorType.Sliding:
					OffGridSound.SoundEvent("Play_SecurityGateOpening", gameObject);
					break;
				case DoorType.Gate:
					OffGridSound.SoundEvent("Play_SFX_Gate_Open", this.gameObject);
					break;
			}
			animator.SetBool("isOpen", true);
			isOpen = true;
			return true;
		}
		// door is open, and trying to close it:
		else if (!open && isOpen)  {

			openDirection = fromFront ? 1 : -1;

			switch (info.type) {
				case DoorType.Swinging:
					OffGridSound.SoundEvent("Play_DoorClosing", this.gameObject);
					animator.SetInteger("OpenDirection", openDirection);
					break;
				case DoorType.Sliding:
					OffGridSound.SoundEvent("Play_SecurityGateClosing", gameObject);
					break;
				case DoorType.Gate:
					OffGridSound.SoundEvent("Play_SFX_Gate_Open", this.gameObject);
					break;
			}
			animator.SetBool("isOpen", false);
			isOpen = false;
			return true;
		}
		// nope.
		return false;
    }

    public DoorInfo SaveState()
    {
        return new DoorInfo(info);
    }

    public void ResetStateOnLoad(DoorInfo info)
    {
        this.info = new DoorInfo(info);

        animator.SetBool("isOpen", isOpen);
        if (type == DoorType.Swinging)
        {
            animator.SetInteger("OpenDirection", openDirection);
        }
    }
#else
    public void Toggle(bool fromFront)
    {
        // Stub for LevelKit
    }
#endif //GAME_CORE
}

#if UNITY_EDITOR
    [CustomEditor(typeof(Door))]
    [CanEditMultipleObjects]
    public class DoorInspector : Editor
    {
        public override void OnInspectorGUI()
        {
            EditorGUILayout.Space();
            EditorGUILayout.PropertyField(serializedObject.FindProperty("info.type"), new GUIContent("Type"));
            EditorGUILayout.PropertyField(serializedObject.FindProperty("info.zone"), new GUIContent("Zone"));
            EditorGUILayout.PropertyField(serializedObject.FindProperty("info.isLocked"), new GUIContent("isLocked"));
            EditorGUILayout.PropertyField(serializedObject.FindProperty("info.isOpen"), new GUIContent("isOpen"));

            serializedObject.ApplyModifiedProperties();
        }
    }
    #endif

